{"version":3,"file":"app/api/chat/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./node_modules/openai/version.mjs","webpack://_N_E/./node_modules/openai/_shims/registry.mjs","webpack://_N_E/./node_modules/openai/_shims/MultipartBody.mjs","webpack://_N_E/./node_modules/openai/_shims/web-runtime.mjs","webpack://_N_E/./node_modules/openai/_shims/index.mjs","webpack://_N_E/./node_modules/openai/error.mjs","webpack://_N_E/./node_modules/openai/streaming.mjs","webpack://_N_E/./node_modules/openai/uploads.mjs","webpack://_N_E/./node_modules/openai/core.mjs","webpack://_N_E/./node_modules/openai/pagination.mjs","webpack://_N_E/./node_modules/openai/resource.mjs","webpack://_N_E/./node_modules/openai/resources/completions.mjs","webpack://_N_E/./node_modules/openai/resources/chat/completions.mjs","webpack://_N_E/./node_modules/openai/resources/chat/chat.mjs","webpack://_N_E/./node_modules/openai/resources/embeddings.mjs","webpack://_N_E/./node_modules/openai/resources/files.mjs","webpack://_N_E/./node_modules/openai/resources/images.mjs","webpack://_N_E/./node_modules/openai/resources/audio/speech.mjs","webpack://_N_E/./node_modules/openai/resources/audio/transcriptions.mjs","webpack://_N_E/./node_modules/openai/resources/audio/translations.mjs","webpack://_N_E/./node_modules/openai/resources/audio/audio.mjs","webpack://_N_E/./node_modules/openai/resources/moderations.mjs","webpack://_N_E/./node_modules/openai/resources/models.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/jobs.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs","webpack://_N_E/./node_modules/openai/resources/beta/assistants/files.mjs","webpack://_N_E/./node_modules/openai/resources/beta/assistants/assistants.mjs","webpack://_N_E/./node_modules/openai/lib/RunnableFunction.mjs","webpack://_N_E/./node_modules/openai/lib/chatCompletionUtils.mjs","webpack://_N_E/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionRunner.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionStream.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs","webpack://_N_E/./node_modules/openai/resources/beta/chat/completions.mjs","webpack://_N_E/./node_modules/openai/resources/beta/chat/chat.mjs","webpack://_N_E/./node_modules/openai/lib/AbstractAssistantStreamRunner.mjs","webpack://_N_E/./node_modules/openai/lib/AssistantStream.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/messages/files.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/messages/messages.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/runs/steps.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/runs/runs.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/threads.mjs","webpack://_N_E/./node_modules/openai/resources/beta/beta.mjs","webpack://_N_E/./node_modules/openai/index.mjs","webpack://_N_E/./node_modules/ai/node_modules/nanoid/non-secure/index.js","webpack://_N_E/./node_modules/eventsource-parser/dist/index.js","webpack://_N_E/./node_modules/ai/dist/index.mjs","webpack://_N_E/./src/app/api/chat/route.ts","webpack://_N_E/./src/app/api/chat/route.ts?7a0b","webpack://_N_E/","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","export const VERSION = '4.29.1'; // x-release-please-version\n//# sourceMappingURL=version.mjs.map","export let auto = false;\nexport let kind = undefined;\nexport let fetch = undefined;\nexport let Request = undefined;\nexport let Response = undefined;\nexport let Headers = undefined;\nexport let FormData = undefined;\nexport let Blob = undefined;\nexport let File = undefined;\nexport let ReadableStream = undefined;\nexport let getMultipartRequestOptions = undefined;\nexport let getDefaultAgent = undefined;\nexport let fileFromPath = undefined;\nexport let isFsReadStream = undefined;\nexport function setShims(shims, options = { auto: false }) {\n    if (auto) {\n        throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n}\n//# sourceMappingURL=registry.mjs.map","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n    constructor(body) {\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return 'MultipartBody';\n    }\n}\n//# sourceMappingURL=MultipartBody.mjs.map","import { MultipartBody } from \"./MultipartBody.mjs\";\nexport function getRuntime({ manuallyImported } = {}) {\n    const recommendation = manuallyImported ?\n        `You may need to use polyfills`\n        : `Add one of these imports before your first \\`import … from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n    let _fetch, _Request, _Response, _Headers;\n    try {\n        // @ts-ignore\n        _fetch = fetch;\n        // @ts-ignore\n        _Request = Request;\n        // @ts-ignore\n        _Response = Response;\n        // @ts-ignore\n        _Headers = Headers;\n    }\n    catch (error) {\n        throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);\n    }\n    return {\n        kind: 'web',\n        fetch: _fetch,\n        Request: _Request,\n        Response: _Response,\n        Headers: _Headers,\n        FormData: \n        // @ts-ignore\n        typeof FormData !== 'undefined' ? FormData : (class FormData {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);\n            }\n        }),\n        Blob: typeof Blob !== 'undefined' ? Blob : (class Blob {\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);\n            }\n        }),\n        File: \n        // @ts-ignore\n        typeof File !== 'undefined' ? File : (class File {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);\n            }\n        }),\n        ReadableStream: \n        // @ts-ignore\n        typeof ReadableStream !== 'undefined' ? ReadableStream : (class ReadableStream {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);\n            }\n        }),\n        getMultipartRequestOptions: async (\n        // @ts-ignore\n        form, opts) => ({\n            ...opts,\n            body: new MultipartBody(form),\n        }),\n        getDefaultAgent: (url) => undefined,\n        fileFromPath: () => {\n            throw new Error('The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads');\n        },\n        isFsReadStream: (value) => false,\n    };\n}\n//# sourceMappingURL=web-runtime.mjs.map","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'openai/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","// File generated from our OpenAPI spec by Stainless.\nimport { castToError } from \"./core.mjs\";\nexport class OpenAIError extends Error {\n}\nexport class APIError extends OpenAIError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        const data = error;\n        this.error = data;\n        this.code = data?.['code'];\n        this.param = data?.['param'];\n        this.type = data?.['type'];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status) {\n            return new APIConnectionError({ cause: castToError(errorResponse) });\n        }\n        const error = errorResponse?.['error'];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nexport class APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n        this.status = undefined;\n    }\n}\nexport class APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        this.status = undefined;\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nexport class APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nexport class BadRequestError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 400;\n    }\n}\nexport class AuthenticationError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 401;\n    }\n}\nexport class PermissionDeniedError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 403;\n    }\n}\nexport class NotFoundError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 404;\n    }\n}\nexport class ConflictError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 409;\n    }\n}\nexport class UnprocessableEntityError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 422;\n    }\n}\nexport class RateLimitError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 429;\n    }\n}\nexport class InternalServerError extends APIError {\n}\n//# sourceMappingURL=error.mjs.map","import { ReadableStream } from \"./_shims/index.mjs\";\nimport { OpenAIError } from \"./error.mjs\";\nimport { APIError } from 'openai/error';\nexport class Stream {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        const decoder = new SSEDecoder();\n        async function* iterMessages() {\n            if (!response.body) {\n                controller.abort();\n                throw new OpenAIError(`Attempted to iterate over a response with no body`);\n            }\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(response.body);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    const sse = decoder.decode(line);\n                    if (sse)\n                        yield sse;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                const sse = decoder.decode(line);\n                if (sse)\n                    yield sse;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of iterMessages()) {\n                    if (done)\n                        continue;\n                    if (sse.data.startsWith('[DONE]')) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new APIError(undefined, data.error, undefined, undefined);\n                        }\n                        yield data;\n                    }\n                    else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == 'error') {\n                            throw new APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield { event: sse.event, data: data };\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === 'AbortError')\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */\n    static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(readableStream);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()) {\n                    if (done)\n                        continue;\n                    if (line)\n                        yield JSON.parse(line);\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === 'AbortError')\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */\n    tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue) => {\n            return {\n                next: () => {\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                },\n            };\n        };\n        return [\n            new Stream(() => teeIterator(left), this.controller),\n            new Stream(() => teeIterator(right), this.controller),\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */\n    toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new ReadableStream({\n            async start() {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull(ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done)\n                        return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n                    ctrl.enqueue(bytes);\n                }\n                catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel() {\n                await iter.return?.();\n            },\n        });\n    }\n}\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith('\\r')) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join('\\n'),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(':')) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, ':');\n        if (value.startsWith(' ')) {\n            value = value.substring(1);\n        }\n        if (fieldname === 'event') {\n            this.event = value;\n        }\n        else if (fieldname === 'data') {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n    constructor() {\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = '\\r' + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith('\\r')) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        // if there is a trailing new line then the last entry will be an empty\n        // string which we don't care about\n        if (trailingNewline) {\n            lines.pop();\n        }\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [lines.pop() || ''];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null)\n            return '';\n        if (typeof bytes === 'string')\n            return bytes;\n        // Node:\n        if (typeof Buffer !== 'undefined') {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== 'undefined') {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [this.buffer.join('')];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\n/** This is an internal helper function that's just used for testing */\nexport function _decodeChunks(chunks) {\n    const decoder = new LineDecoder();\n    const lines = [];\n    for (const chunk of chunks) {\n        lines.push(...decoder.decode(chunk));\n    }\n    return lines;\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n    }\n    return [str, '', ''];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n//# sourceMappingURL=streaming.mjs.map","import { FormData, File, getMultipartRequestOptions, isFsReadStream, } from \"./_shims/index.mjs\";\nexport { fileFromPath } from \"./_shims/index.mjs\";\nexport const isResponseLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.url === 'string' &&\n    typeof value.blob === 'function';\nexport const isFileLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.name === 'string' &&\n    typeof value.lastModified === 'number' &&\n    isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.size === 'number' &&\n    typeof value.type === 'string' &&\n    typeof value.text === 'function' &&\n    typeof value.slice === 'function' &&\n    typeof value.arrayBuffer === 'function';\nexport const isUploadable = (value) => {\n    return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options = {}) {\n    // If it's a promise, resolve it.\n    value = await value;\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\n        return new File([blob], name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = getName(value) ?? 'unknown_file');\n    if (!options.type) {\n        const type = bits[0]?.type;\n        if (typeof type === 'string') {\n            options = { ...options, type };\n        }\n    }\n    return new File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === 'string' ||\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n        value instanceof ArrayBuffer) {\n        parts.push(value);\n    }\n    else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    }\n    else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value) {\n            parts.push(chunk); // TODO, consider validating?\n        }\n    }\n    else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n            ?.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n    return (getStringFromMaybeBuffer(value.name) ||\n        getStringFromMaybeBuffer(value.filename) ||\n        // For fs.ReadStream\n        getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop());\n}\nconst getStringFromMaybeBuffer = (x) => {\n    if (typeof x === 'string')\n        return x;\n    if (typeof Buffer !== 'undefined' && x instanceof Buffer)\n        return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nexport const isMultipartBody = (body) => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async (opts) => {\n    if (!hasUploadableValue(opts.body))\n        return opts;\n    const form = await createForm(opts.body);\n    return getMultipartRequestOptions(form, opts);\n};\nexport const multipartFormRequestOptions = async (opts) => {\n    const form = await createForm(opts.body);\n    return getMultipartRequestOptions(form, opts);\n};\nexport const createForm = async (body) => {\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n    return form;\n};\nconst hasUploadableValue = (value) => {\n    if (isUploadable(value))\n        return true;\n    if (Array.isArray(value))\n        return value.some(hasUploadableValue);\n    if (value && typeof value === 'object') {\n        for (const k in value) {\n            if (hasUploadableValue(value[k]))\n                return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value) => {\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n    }\n    else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    }\n    else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n    }\n    else if (typeof value === 'object') {\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n    }\n    else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n};\n//# sourceMappingURL=uploads.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\nimport { VERSION } from \"./version.mjs\";\nimport { Stream } from \"./streaming.mjs\";\nimport { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, } from \"./error.mjs\";\nimport { kind as shimsKind, getDefaultAgent, fetch, } from \"./_shims/index.mjs\";\nimport { isMultipartBody } from \"./uploads.mjs\";\nexport { maybeMultipartFormRequestOptions, multipartFormRequestOptions, createForm, } from \"./uploads.mjs\";\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug('response', response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        if (props.options.__streamClass) {\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\n        }\n        return Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get('content-type');\n    const isJSON = contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\n    if (isJSON) {\n        const json = await response.json();\n        debug('response', response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug('response', response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nexport class APIClient {\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, // 10 minutes\n    httpAgent, fetch: overridenFetch, }) {\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n        this.timeout = validatePositiveInteger('timeout', timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overridenFetch ?? fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */\n    defaultHeaders(opts) {\n        return {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent': this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts),\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */\n    validateHeaders(headers, customHeaders) { }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    calculateContentLength(body) {\n        if (typeof body === 'string') {\n            if (typeof Buffer !== 'undefined') {\n                return Buffer.byteLength(body, 'utf8').toString();\n            }\n            if (typeof TextEncoder !== 'undefined') {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        return null;\n    }\n    buildRequest(options) {\n        const { method, path, query, headers: headers = {} } = options;\n        const body = isMultipartBody(options.body) ? options.body.body\n            : options.body ? JSON.stringify(options.body, null, 2)\n                : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if ('timeout' in options)\n            validatePositiveInteger('timeout', options.timeout);\n        const timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n        const minAgentTimeout = timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === 'number' &&\n            minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!options.idempotencyKey)\n                options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({ options, headers, contentLength });\n        const req = {\n            method,\n            ...(body && { body: body }),\n            headers: reqHeaders,\n            ...(httpAgent && { agent: httpAgent }),\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null,\n        };\n        return { req, url, timeout };\n    }\n    buildHeaders({ options, headers, contentLength, }) {\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders['content-length'] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if (isMultipartBody(options.body) && shimsKind !== 'node') {\n            delete reqHeaders['content-type'];\n        }\n        this.validateHeaders(reqHeaders, headers);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    parseHeaders(headers) {\n        return (!headers ? {}\n            : Symbol.iterator in headers ?\n                Object.fromEntries(Array.from(headers).map((header) => [...header]))\n                : { ...headers });\n    }\n    makeStatusError(status, error, message, headers) {\n        return APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        if (retriesRemaining == null) {\n            retriesRemaining = options.maxRetries ?? this.maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options);\n        await this.prepareRequest(req, { url, options });\n        debug('request', url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === 'AbortError') {\n                throw new APIConnectionTimeoutError();\n            }\n            throw new APIConnectionError({ cause: response });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e) => castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return { response, options, controller };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ?\n            new URL(path)\n            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query)\n            .filter(([_, value]) => typeof value !== 'undefined')\n            .map(([key, value]) => {\n            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        })\n            .join('&');\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        return (this.getRequestClient()\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            .fetch.call(undefined, url, { signal: controller.signal, ...options })\n            .finally(() => {\n            clearTimeout(timeout);\n        }));\n    }\n    getRequestClient() {\n        return { fetch: this.fetch };\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.['retry-after'];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${VERSION}`;\n    }\n}\nexport class AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        const nextOptions = { ...this.options };\n        if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n        }\n        else if ('url' in nextInfo) {\n            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n            for (const [key, value] of params) {\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n    constructor(client, request, Page) {\n        super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\nexport const createResponseHeaders = (headers) => {\n    return new Proxy(Object.fromEntries(\n    // @ts-ignore\n    headers.entries()), {\n        get(target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        },\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryResponse: true,\n    __streamClass: true,\n};\nexport const isRequestOptions = (obj) => {\n    return (typeof obj === 'object' &&\n        obj !== null &&\n        !isEmptyObj(obj) &&\n        Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k)));\n};\nconst getPlatformProperties = () => {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': Deno.version,\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(process.platform),\n            'X-Stainless-Arch': normalizeArch(process.arch),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\nexport const safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nexport const castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    return new Error(err);\n};\nexport const ensurePresent = (value) => {\n    if (value == null)\n        throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env) => {\n    if (typeof process !== 'undefined') {\n        return process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof Deno !== 'undefined') {\n        return Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\nexport const coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nexport const maybeCoerceInteger = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nexport const maybeCoerceFloat = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders, newHeaders) {\n    for (const k in newHeaders) {\n        if (!hasOwn(newHeaders, k))\n            continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey)\n            continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        }\n        else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nexport function debug(action, ...args) {\n    if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\nexport const isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\nexport const isHeadersProtocol = (headers) => {\n    return typeof headers?.get === 'function';\n};\nexport const getRequiredHeader = (headers, header) => {\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() +\n            header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)) {\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1)\n                    return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    throw new Error(`Could not find ${header} header`);\n};\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str) => {\n    if (!str)\n        return '';\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str).toString('base64');\n    }\n    if (typeof btoa !== 'undefined') {\n        return btoa(str);\n    }\n    throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport function isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n//# sourceMappingURL=core.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { AbstractPage } from \"./core.mjs\";\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n     * This page represents a response that isn't actually paginated at the API level\n     * so there will never be any next page params.\n     */\n    nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n}\nexport class CursorPage extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info)\n            return null;\n        if ('params' in info)\n            return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length)\n            return null;\n        return params;\n    }\n    nextPageInfo() {\n        const data = this.getPaginatedItems();\n        if (!data.length) {\n            return null;\n        }\n        const id = data[data.length - 1]?.id;\n        if (!id) {\n            return null;\n        }\n        return { params: { after: id } };\n    }\n}\n//# sourceMappingURL=pagination.mjs.map","// File generated from our OpenAPI spec by Stainless.\nexport class APIResource {\n    constructor(client) {\n        this._client = client;\n    }\n}\n//# sourceMappingURL=resource.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport class Completions extends APIResource {\n    create(body, options) {\n        return this._client.post('/completions', { body, ...options, stream: body.stream ?? false });\n    }\n}\n(function (Completions) {\n})(Completions || (Completions = {}));\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport class Completions extends APIResource {\n    create(body, options) {\n        return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false });\n    }\n}\n(function (Completions) {\n})(Completions || (Completions = {}));\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as CompletionsAPI from 'openai/resources/chat/completions';\nexport class Chat extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.completions = new CompletionsAPI.Completions(this._client);\n    }\n}\n(function (Chat) {\n    Chat.Completions = CompletionsAPI.Completions;\n})(Chat || (Chat = {}));\n//# sourceMappingURL=chat.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport class Embeddings extends APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     */\n    create(body, options) {\n        return this._client.post('/embeddings', { body, ...options });\n    }\n}\n(function (Embeddings) {\n})(Embeddings || (Embeddings = {}));\n//# sourceMappingURL=embeddings.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport { sleep } from 'openai/core';\nimport { APIConnectionTimeoutError } from 'openai/error';\nimport * as FilesAPI from 'openai/resources/files';\nimport { multipartFormRequestOptions } from 'openai/core';\nimport { Page } from 'openai/pagination';\nexport class Files extends APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. The size of all the\n     * files uploaded by one organization can be up to 100 GB.\n     *\n     * The size of individual files can be a maximum of 512 MB or 2 million tokens for\n     * Assistants. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) to\n     * learn more about the types of files supported. The Fine-tuning API only supports\n     * `.jsonl` files.\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */\n    create(body, options) {\n        return this._client.post('/files', multipartFormRequestOptions({ body, ...options }));\n    }\n    /**\n     * Returns information about a specific file.\n     */\n    retrieve(fileId, options) {\n        return this._client.get(`/files/${fileId}`, options);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });\n    }\n    /**\n     * Delete a file.\n     */\n    del(fileId, options) {\n        return this._client.delete(`/files/${fileId}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */\n    content(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, { ...options, __binaryResponse: true });\n    }\n    /**\n     * Returns the contents of the specified file.\n     *\n     * @deprecated The `.content()` method should be used instead\n     */\n    retrieveContent(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, {\n            ...options,\n            headers: { Accept: 'application/json', ...options?.headers },\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */\n    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while (!file.status || !TERMINAL_STATES.has(file.status)) {\n            await sleep(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n                });\n            }\n        }\n        return file;\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FileObjectsPage extends Page {\n}\n(function (Files) {\n    Files.FileObjectsPage = FilesAPI.FileObjectsPage;\n})(Files || (Files = {}));\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Images extends APIResource {\n    /**\n     * Creates a variation of a given image.\n     */\n    createVariation(body, options) {\n        return this._client.post('/images/variations', multipartFormRequestOptions({ body, ...options }));\n    }\n    /**\n     * Creates an edited or extended image given an original image and a prompt.\n     */\n    edit(body, options) {\n        return this._client.post('/images/edits', multipartFormRequestOptions({ body, ...options }));\n    }\n    /**\n     * Creates an image given a prompt.\n     */\n    generate(body, options) {\n        return this._client.post('/images/generations', { body, ...options });\n    }\n}\n(function (Images) {\n})(Images || (Images = {}));\n//# sourceMappingURL=images.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport class Speech extends APIResource {\n    /**\n     * Generates audio from the input text.\n     */\n    create(body, options) {\n        return this._client.post('/audio/speech', { body, ...options, __binaryResponse: true });\n    }\n}\n(function (Speech) {\n})(Speech || (Speech = {}));\n//# sourceMappingURL=speech.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Transcriptions extends APIResource {\n    /**\n     * Transcribes audio into the input language.\n     */\n    create(body, options) {\n        return this._client.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options }));\n    }\n}\n(function (Transcriptions) {\n})(Transcriptions || (Transcriptions = {}));\n//# sourceMappingURL=transcriptions.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Translations extends APIResource {\n    /**\n     * Translates audio into English.\n     */\n    create(body, options) {\n        return this._client.post('/audio/translations', multipartFormRequestOptions({ body, ...options }));\n    }\n}\n(function (Translations) {\n})(Translations || (Translations = {}));\n//# sourceMappingURL=translations.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as SpeechAPI from 'openai/resources/audio/speech';\nimport * as TranscriptionsAPI from 'openai/resources/audio/transcriptions';\nimport * as TranslationsAPI from 'openai/resources/audio/translations';\nexport class Audio extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n        this.translations = new TranslationsAPI.Translations(this._client);\n        this.speech = new SpeechAPI.Speech(this._client);\n    }\n}\n(function (Audio) {\n    Audio.Transcriptions = TranscriptionsAPI.Transcriptions;\n    Audio.Translations = TranslationsAPI.Translations;\n    Audio.Speech = SpeechAPI.Speech;\n})(Audio || (Audio = {}));\n//# sourceMappingURL=audio.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport class Moderations extends APIResource {\n    /**\n     * Classifies if text is potentially harmful.\n     */\n    create(body, options) {\n        return this._client.post('/moderations', { body, ...options });\n    }\n}\n(function (Moderations) {\n})(Moderations || (Moderations = {}));\n//# sourceMappingURL=moderations.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as ModelsAPI from 'openai/resources/models';\nimport { Page } from 'openai/pagination';\nexport class Models extends APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */\n    retrieve(model, options) {\n        return this._client.get(`/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */\n    list(options) {\n        return this._client.getAPIList('/models', ModelsPage, options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */\n    del(model, options) {\n        return this._client.delete(`/models/${model}`, options);\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class ModelsPage extends Page {\n}\n(function (Models) {\n    Models.ModelsPage = ModelsAPI.ModelsPage;\n})(Models || (Models = {}));\n//# sourceMappingURL=models.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as JobsAPI from 'openai/resources/fine-tuning/jobs';\nimport { CursorPage } from 'openai/pagination';\nexport class Jobs extends APIResource {\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */\n    create(body, options) {\n        return this._client.post('/fine_tuning/jobs', { body, ...options });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */\n    retrieve(fineTuningJobId, options) {\n        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     */\n    cancel(fineTuningJobId, options) {\n        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n    }\n    listEvents(fineTuningJobId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.listEvents(fineTuningJobId, {}, query);\n        }\n        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n            query,\n            ...options,\n        });\n    }\n}\nexport class FineTuningJobsPage extends CursorPage {\n}\nexport class FineTuningJobEventsPage extends CursorPage {\n}\n(function (Jobs) {\n    Jobs.FineTuningJobsPage = JobsAPI.FineTuningJobsPage;\n    Jobs.FineTuningJobEventsPage = JobsAPI.FineTuningJobEventsPage;\n})(Jobs || (Jobs = {}));\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as JobsAPI from 'openai/resources/fine-tuning/jobs';\nexport class FineTuning extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.jobs = new JobsAPI.Jobs(this._client);\n    }\n}\n(function (FineTuning) {\n    FineTuning.Jobs = JobsAPI.Jobs;\n    FineTuning.FineTuningJobsPage = JobsAPI.FineTuningJobsPage;\n    FineTuning.FineTuningJobEventsPage = JobsAPI.FineTuningJobEventsPage;\n})(FineTuning || (FineTuning = {}));\n//# sourceMappingURL=fine-tuning.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as FilesAPI from 'openai/resources/beta/assistants/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Files extends APIResource {\n    /**\n     * Create an assistant file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to an\n     * [assistant](https://platform.openai.com/docs/api-reference/assistants).\n     */\n    create(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}/files`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Retrieves an AssistantFile.\n     */\n    retrieve(assistantId, fileId, options) {\n        return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(assistantId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list(assistantId, {}, query);\n        }\n        return this._client.getAPIList(`/assistants/${assistantId}/files`, AssistantFilesPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Delete an assistant file.\n     */\n    del(assistantId, fileId, options) {\n        return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n}\nexport class AssistantFilesPage extends CursorPage {\n}\n(function (Files) {\n    Files.AssistantFilesPage = FilesAPI.AssistantFilesPage;\n})(Files || (Files = {}));\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as AssistantsAPI from 'openai/resources/beta/assistants/assistants';\nimport * as FilesAPI from 'openai/resources/beta/assistants/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Assistants extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n    }\n    /**\n     * Create an assistant with a model and instructions.\n     */\n    create(body, options) {\n        return this._client.post('/assistants', {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     */\n    retrieve(assistantId, options) {\n        return this._client.get(`/assistants/${assistantId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Modifies an assistant.\n     */\n    update(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList('/assistants', AssistantsPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Delete an assistant.\n     */\n    del(assistantId, options) {\n        return this._client.delete(`/assistants/${assistantId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n}\nexport class AssistantsPage extends CursorPage {\n}\n(function (Assistants) {\n    Assistants.AssistantsPage = AssistantsAPI.AssistantsPage;\n    Assistants.Files = FilesAPI.Files;\n    Assistants.AssistantFilesPage = FilesAPI.AssistantFilesPage;\n})(Assistants || (Assistants = {}));\n//# sourceMappingURL=assistants.mjs.map","export function isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === 'function';\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */\nexport class ParsingFunction {\n    constructor(input) {\n        this.function = input.function;\n        this.parse = input.parse;\n        this.parameters = input.parameters;\n        this.description = input.description;\n        this.name = input.name;\n    }\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction {\n    constructor(input) {\n        this.type = 'function';\n        this.function = input;\n    }\n}\n//# sourceMappingURL=RunnableFunction.mjs.map","export const isAssistantMessage = (message) => {\n    return message?.role === 'assistant';\n};\nexport const isFunctionMessage = (message) => {\n    return message?.role === 'function';\n};\nexport const isToolMessage = (message) => {\n    return message?.role === 'tool';\n};\nexport function isPresent(obj) {\n    return obj != null;\n}\n//# sourceMappingURL=chatCompletionUtils.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nimport { isRunnableFunctionWithParse, } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner {\n    constructor() {\n        _AbstractChatCompletionRunner_instances.add(this);\n        this.controller = new AbortController();\n        _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_listeners.set(this, {});\n        this._chatCompletions = [];\n        this.messages = [];\n        _AbstractChatCompletionRunner_ended.set(this, false);\n        _AbstractChatCompletionRunner_errored.set(this, false);\n        _AbstractChatCompletionRunner_aborted.set(this, false);\n        _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n        _AbstractChatCompletionRunner_handleError.set(this, (error) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n            if (error instanceof Error && error.name === 'AbortError') {\n                error = new APIUserAbortError();\n            }\n            if (error instanceof APIUserAbortError) {\n                __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n                return this._emit('abort', error);\n            }\n            if (error instanceof OpenAIError) {\n                return this._emit('error', error);\n            }\n            if (error instanceof Error) {\n                const openAIError = new OpenAIError(error.message);\n                // @ts-ignore\n                openAIError.cause = error;\n                return this._emit('error', openAIError);\n            }\n            return this._emit('error', new OpenAIError(String(error)));\n        });\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(() => { });\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(() => { });\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(() => {\n            executor().then(() => {\n                this._emitFinal();\n                this._emit('end');\n            }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n        }, 0);\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit('chatCompletion', chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message)\n            this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!('content' in message))\n            message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit('message', message);\n            if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit('functionCallResult', message.content);\n            }\n            else if (isAssistantMessage(message) && message.function_call) {\n                this._emit('functionCall', message.function_call);\n            }\n            else if (isAssistantMessage(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls) {\n                    if (tool_call.type === 'function') {\n                        this._emit('functionCall', tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    _connected() {\n        if (this.ended)\n            return;\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n        this._emit('connect');\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */\n    async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalFunctionCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    }\n    async finalFunctionCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [...this._chatCompletions];\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) {\n            return;\n        }\n        if (event === 'end') {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion)\n            this._emit('finalChatCompletion', completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage)\n            this._emit('finalMessage', finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent)\n            this._emit('finalContent', finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n        if (finalFunctionCall)\n            this._emit('finalFunctionCall', finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n        if (finalFunctionCallResult != null)\n            this._emit('finalFunctionCallResult', finalFunctionCallResult);\n        if (this._chatCompletions.some((c) => c.usage)) {\n            this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addChatCompletion(chatCompletion);\n    }\n    async _runChatCompletion(completions, params, options) {\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(completions, params, options);\n    }\n    async _runFunctions(completions, params, options) {\n        const role = 'function';\n        const { function_call = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.functions) {\n            functionsByName[f.name || f.function.name] = f;\n        }\n        const functions = params.functions.map((f) => ({\n            name: f.name || f.function.name,\n            parameters: f.parameters,\n            description: f.description,\n        }));\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                function_call,\n                functions,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.function_call)\n                return;\n            const { name, arguments: args } = message.function_call;\n            const fn = functionsByName[name];\n            if (!fn) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n                    .map((f) => JSON.stringify(f.name))\n                    .join(', ')}. Please try again`;\n                this._addMessage({ role, name, content });\n                continue;\n            }\n            else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                this._addMessage({ role, name, content });\n                continue;\n            }\n            let parsed;\n            try {\n                parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n            }\n            catch (error) {\n                this._addMessage({\n                    role,\n                    name,\n                    content: error instanceof Error ? error.message : String(error),\n                });\n                continue;\n            }\n            // @ts-expect-error it can't rule out `never` type.\n            const rawContent = await fn.function(parsed, this);\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n            this._addMessage({ role, name, content });\n            if (singleFunctionToCall)\n                return;\n        }\n    }\n    async _runTools(completions, params, options) {\n        const role = 'tool';\n        const { tool_choice = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.tools) {\n            if (f.type === 'function') {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = 'tools' in params ?\n            params.tools.map((t) => t.type === 'function' ?\n                {\n                    type: 'function',\n                    function: {\n                        name: t.function.name || t.function.function.name,\n                        parameters: t.function.parameters,\n                        description: t.function.description,\n                    },\n                }\n                : t)\n            : undefined;\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls) {\n                return;\n            }\n            for (const tool_call of message.tool_calls) {\n                if (tool_call.type !== 'function')\n                    continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools\n                        .map((f) => JSON.stringify(f.function.name))\n                        .join(', ')}. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n                }\n                catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({ role, tool_call_id, content });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while (i-- > 0) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message)) {\n            return { ...message, content: message.content ?? null };\n        }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message) && message?.function_call) {\n            return message.function_call;\n        }\n        if (isAssistantMessage(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isFunctionMessage(message) && message.content != null) {\n            return message.content;\n        }\n        if (isToolMessage(message) &&\n            message.content != null &&\n            this.messages.some((x) => x.role === 'assistant' &&\n                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return (typeof rawContent === 'string' ? rawContent\n        : rawContent === undefined ? 'undefined'\n            : JSON.stringify(rawContent));\n};\n//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map","import { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n    /** @deprecated - please use `runTools` instead. */\n    static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n        };\n        runner._run(() => runner._runFunctions(completions, params, opts));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(completions, params, opts));\n        return runner;\n    }\n    _addMessage(message) {\n        super._addMessage(message);\n        if (isAssistantMessage(message) && message.content) {\n            this._emit('content', message.content);\n        }\n    }\n}\n//# sourceMappingURL=ChatCompletionRunner.mjs.map","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion;\nimport { OpenAIError, APIUserAbortError } from 'openai/error';\nimport { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from 'openai/streaming';\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n    constructor() {\n        super(...arguments);\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(completions, params, options) {\n        const runner = new ChatCompletionStream();\n        runner._run(() => runner._runChatCompletion(completions, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const chunk of stream) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream) {\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended)\n            return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit('chunk', chunk, completion);\n        const delta = chunk.choices[0]?.delta?.content;\n        const snapshot = completion.choices[0]?.message;\n        if (delta != null && snapshot?.role === 'assistant' && snapshot?.content) {\n            this._emit('content', delta, snapshot.content);\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        return finalizeChatCompletion(snapshot);\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: [],\n            }, \"f\");\n        }\n        else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                }\n                else {\n                    const { content, ...rest } = logprobs;\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                }\n            }\n            if (finish_reason)\n                choice.finish_reason = finish_reason;\n            Object.assign(choice, other);\n            if (!delta)\n                continue; // Shouldn't happen; just in case.\n            const { content, function_call, role, tool_calls, ...rest } = delta;\n            Object.assign(choice.message, rest);\n            if (content)\n                choice.message.content = (choice.message.content || '') + content;\n            if (role)\n                choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                }\n                else {\n                    if (function_call.name)\n                        choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_b = choice.message.function_call).arguments ?? (_b.arguments = '');\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls)\n                    choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n                    const tool_call = ((_c = choice.message.tool_calls)[index] ?? (_c[index] = {}));\n                    Object.assign(tool_call, rest);\n                    if (id)\n                        tool_call.id = id;\n                    if (type)\n                        tool_call.type = type;\n                    if (fn)\n                        tool_call.function ?? (tool_call.function = { arguments: '' });\n                    if (fn?.name)\n                        tool_call.function.name = fn.name;\n                    if (fn?.arguments)\n                        tool_call.function.arguments += fn.arguments;\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('chunk', (chunk) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            }\n            else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    return {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {\n            if (!finish_reason)\n                throw new OpenAIError(`missing finish_reason for choice ${index}`);\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role)\n                throw new OpenAIError(`missing role for choice ${index}`);\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null)\n                    throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n                if (!name)\n                    throw new OpenAIError(`missing function_call.name for choice ${index}`);\n                return {\n                    ...choiceRest,\n                    message: { content, function_call: { arguments: args, name }, role },\n                    finish_reason,\n                    index,\n                    logprobs,\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        tool_calls: tool_calls.map((tool_call, i) => {\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            if (type == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            if (name == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            if (args == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n                        }),\n                    },\n                };\n            }\n            return {\n                ...choiceRest,\n                message: { ...messageRest, content, role },\n                finish_reason,\n                index,\n                logprobs,\n            };\n        }),\n        created,\n        model,\n        object: 'chat.completion',\n        ...(system_fingerprint ? { system_fingerprint } : {}),\n    };\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n//# sourceMappingURL=ChatCompletionStream.mjs.map","import { ChatCompletionStream } from \"./ChatCompletionStream.mjs\";\nexport class ChatCompletionStreamingRunner extends ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    /** @deprecated - please use `runTools` instead. */\n    static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n        };\n        runner._run(() => runner._runFunctions(completions, params, opts));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(completions, params, opts));\n        return runner;\n    }\n}\n//# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { ChatCompletionRunner } from 'openai/lib/ChatCompletionRunner';\nexport { ChatCompletionRunner } from 'openai/lib/ChatCompletionRunner';\nimport { ChatCompletionStreamingRunner, } from 'openai/lib/ChatCompletionStreamingRunner';\nexport { ChatCompletionStreamingRunner, } from 'openai/lib/ChatCompletionStreamingRunner';\nexport { ParsingFunction, ParsingToolFunction, } from 'openai/lib/RunnableFunction';\nimport { ChatCompletionStream } from 'openai/lib/ChatCompletionStream';\nexport { ChatCompletionStream } from 'openai/lib/ChatCompletionStream';\nexport class Completions extends APIResource {\n    runFunctions(body, options) {\n        if (body.stream) {\n            return ChatCompletionStreamingRunner.runFunctions(this._client.chat.completions, body, options);\n        }\n        return ChatCompletionRunner.runFunctions(this._client.chat.completions, body, options);\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return ChatCompletionStreamingRunner.runTools(this._client.chat.completions, body, options);\n        }\n        return ChatCompletionRunner.runTools(this._client.chat.completions, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */\n    stream(body, options) {\n        return ChatCompletionStream.createChatCompletion(this._client.chat.completions, body, options);\n    }\n}\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as CompletionsAPI from 'openai/resources/beta/chat/completions';\nexport class Chat extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.completions = new CompletionsAPI.Completions(this._client);\n    }\n}\n(function (Chat) {\n    Chat.Completions = CompletionsAPI.Completions;\n})(Chat || (Chat = {}));\n//# sourceMappingURL=chat.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractAssistantStreamRunner_connectedPromise, _AbstractAssistantStreamRunner_resolveConnectedPromise, _AbstractAssistantStreamRunner_rejectConnectedPromise, _AbstractAssistantStreamRunner_endPromise, _AbstractAssistantStreamRunner_resolveEndPromise, _AbstractAssistantStreamRunner_rejectEndPromise, _AbstractAssistantStreamRunner_listeners, _AbstractAssistantStreamRunner_ended, _AbstractAssistantStreamRunner_errored, _AbstractAssistantStreamRunner_aborted, _AbstractAssistantStreamRunner_catchingPromiseCreated, _AbstractAssistantStreamRunner_handleError;\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nexport class AbstractAssistantStreamRunner {\n    constructor() {\n        this.controller = new AbortController();\n        _AbstractAssistantStreamRunner_connectedPromise.set(this, void 0);\n        _AbstractAssistantStreamRunner_resolveConnectedPromise.set(this, () => { });\n        _AbstractAssistantStreamRunner_rejectConnectedPromise.set(this, () => { });\n        _AbstractAssistantStreamRunner_endPromise.set(this, void 0);\n        _AbstractAssistantStreamRunner_resolveEndPromise.set(this, () => { });\n        _AbstractAssistantStreamRunner_rejectEndPromise.set(this, () => { });\n        _AbstractAssistantStreamRunner_listeners.set(this, {});\n        _AbstractAssistantStreamRunner_ended.set(this, false);\n        _AbstractAssistantStreamRunner_errored.set(this, false);\n        _AbstractAssistantStreamRunner_aborted.set(this, false);\n        _AbstractAssistantStreamRunner_catchingPromiseCreated.set(this, false);\n        _AbstractAssistantStreamRunner_handleError.set(this, (error) => {\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_errored, true, \"f\");\n            if (error instanceof Error && error.name === 'AbortError') {\n                error = new APIUserAbortError();\n            }\n            if (error instanceof APIUserAbortError) {\n                __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_aborted, true, \"f\");\n                return this._emit('abort', error);\n            }\n            if (error instanceof OpenAIError) {\n                return this._emit('error', error);\n            }\n            if (error instanceof Error) {\n                const openAIError = new OpenAIError(error.message);\n                // @ts-ignore\n                openAIError.cause = error;\n                return this._emit('error', openAIError);\n            }\n            return this._emit('error', new OpenAIError(String(error)));\n        });\n        __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_connectedPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_endPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_connectedPromise, \"f\").catch(() => { });\n        __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_endPromise, \"f\").catch(() => { });\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(() => {\n            executor().then(() => {\n                // this._emitFinal();\n                this._emit('end');\n            }, __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_handleError, \"f\"));\n        }, 0);\n    }\n    _addRun(run) {\n        return run;\n    }\n    _connected() {\n        if (this.ended)\n            return;\n        __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_resolveConnectedPromise, \"f\").call(this);\n        this._emit('connect');\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_endPromise, \"f\");\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _AbstractAssistantStreamRunner_ended, \"f\")) {\n            return;\n        }\n        if (event === 'end') {\n            __classPrivateFieldSet(this, _AbstractAssistantStreamRunner_ended, true, \"f\");\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractAssistantStreamRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    async _threadAssistantStream(body, thread, options) {\n        return await this._createThreadAssistantStream(thread, body, options);\n    }\n    async _runAssistantStream(threadId, runs, params, options) {\n        return await this._createAssistantStream(runs, threadId, params, options);\n    }\n    async _runToolAssistantStream(threadId, runId, runs, params, options) {\n        return await this._createToolAssistantStream(runs, threadId, runId, params, options);\n    }\n    async _createThreadAssistantStream(thread, body, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        // this.#validateParams(params);\n        const runResult = await thread.createAndRun({ ...body, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addRun(runResult);\n    }\n    async _createToolAssistantStream(run, threadId, runId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const runResult = await run.submitToolOutputs(threadId, runId, { ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addRun(runResult);\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        // this.#validateParams(params);\n        const runResult = await run.create(threadId, { ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addRun(runResult);\n    }\n}\n_AbstractAssistantStreamRunner_connectedPromise = new WeakMap(), _AbstractAssistantStreamRunner_resolveConnectedPromise = new WeakMap(), _AbstractAssistantStreamRunner_rejectConnectedPromise = new WeakMap(), _AbstractAssistantStreamRunner_endPromise = new WeakMap(), _AbstractAssistantStreamRunner_resolveEndPromise = new WeakMap(), _AbstractAssistantStreamRunner_rejectEndPromise = new WeakMap(), _AbstractAssistantStreamRunner_listeners = new WeakMap(), _AbstractAssistantStreamRunner_ended = new WeakMap(), _AbstractAssistantStreamRunner_errored = new WeakMap(), _AbstractAssistantStreamRunner_aborted = new WeakMap(), _AbstractAssistantStreamRunner_catchingPromiseCreated = new WeakMap(), _AbstractAssistantStreamRunner_handleError = new WeakMap();\n//# sourceMappingURL=AbstractAssistantStreamRunner.mjs.map","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\nimport * as Core from 'openai/core';\nimport { AbstractAssistantStreamRunner, } from \"./AbstractAssistantStreamRunner.mjs\";\nimport { Stream } from 'openai/streaming';\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nexport class AssistantStream extends AbstractAssistantStreamRunner {\n    constructor() {\n        super(...arguments);\n        _AssistantStream_instances.add(this);\n        //Track all events in a single list for reference\n        _AssistantStream_events.set(this, []);\n        //Used to accumulate deltas\n        //We are accumulating many types so the value here is not strict\n        _AssistantStream_runStepSnapshots.set(this, {});\n        _AssistantStream_messageSnapshots.set(this, {});\n        _AssistantStream_messageSnapshot.set(this, void 0);\n        _AssistantStream_finalRun.set(this, void 0);\n        _AssistantStream_currentContentIndex.set(this, void 0);\n        _AssistantStream_currentContent.set(this, void 0);\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\n        _AssistantStream_currentToolCall.set(this, void 0);\n        //For current snapshot methods\n        _AssistantStream_currentEvent.set(this, void 0);\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n    }\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        //Catch all for passing along all events\n        this.on('event', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    static createToolAssistantStream(threadId, runId, runs, body, options) {\n        const runner = new AssistantStream();\n        runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, body, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    async _createToolAssistantStream(run, threadId, runId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.submitToolOutputs(threadId, runId, body, {\n            ...options,\n            signal: this.controller.signal,\n        });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static createThreadAssistantStream(body, thread, options) {\n        const runner = new AssistantStream();\n        runner._run(() => runner._threadAssistantStream(body, thread, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    static createAssistantStream(threadId, runs, params, options) {\n        const runner = new AssistantStream();\n        runner._run(() => runner._runAssistantStream(threadId, runs, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    currentEvent() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n    }\n    currentRun() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n    }\n    currentMessageSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n    }\n    currentRunStepSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n    }\n    async finalRunSteps() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n    }\n    async finalMessages() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n    }\n    async finalRun() {\n        await this.done();\n        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n            throw Error('Final run was not received.');\n        return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n    }\n    async _createThreadAssistantStream(thread, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static accumulateDelta(acc, delta) {\n        for (const [key, deltaValue] of Object.entries(delta)) {\n            if (!acc.hasOwnProperty(key)) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            let accValue = acc[key];\n            if (accValue === null || accValue === undefined) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // We don't accumulate these special properties\n            if (key === 'index' || key === 'type') {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // Type-specific accumulation logic\n            if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n                accValue += deltaValue;\n            }\n            else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n                accValue += deltaValue;\n            }\n            else if (Core.isObj(accValue) && Core.isObj(deltaValue)) {\n                accValue = this.accumulateDelta(accValue, deltaValue);\n            }\n            else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n                if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\n                    continue;\n                }\n            }\n            else {\n                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n            }\n            acc[key] = accValue;\n        }\n        return acc;\n    }\n}\n_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n    if (this.ended)\n        return;\n    __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n    switch (event.event) {\n        case 'thread.created':\n            //No action on this event.\n            break;\n        case 'thread.run.created':\n        case 'thread.run.queued':\n        case 'thread.run.in_progress':\n        case 'thread.run.requires_action':\n        case 'thread.run.completed':\n        case 'thread.run.failed':\n        case 'thread.run.cancelling':\n        case 'thread.run.cancelled':\n        case 'thread.run.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n            break;\n        case 'thread.run.step.created':\n        case 'thread.run.step.in_progress':\n        case 'thread.run.step.delta':\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n            break;\n        case 'thread.message.created':\n        case 'thread.message.in_progress':\n        case 'thread.message.delta':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n            break;\n        case 'error':\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n            throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n    }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n    if (this.ended) {\n        throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n        throw Error('Final run has been been received');\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n    const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n    __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n    for (const content of newContent) {\n        const snapshotContent = accumulatedMessage.content[content.index];\n        if (snapshotContent?.type == 'text') {\n            this._emit('textCreated', snapshotContent.text);\n        }\n    }\n    switch (event.event) {\n        case 'thread.message.created':\n            this._emit('messageCreated', event.data);\n            break;\n        case 'thread.message.in_progress':\n            break;\n        case 'thread.message.delta':\n            this._emit('messageDelta', event.data.delta, accumulatedMessage);\n            if (event.data.delta.content) {\n                for (const content of event.data.delta.content) {\n                    //If it is text delta, emit a text delta event\n                    if (content.type == 'text' && content.text) {\n                        let textDelta = content.text;\n                        let snapshot = accumulatedMessage.content[content.index];\n                        if (snapshot && snapshot.type == 'text') {\n                            this._emit('textDelta', textDelta, snapshot.text);\n                        }\n                        else {\n                            throw Error('The snapshot associated with this text delta is not text or missing');\n                        }\n                    }\n                    if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n                        //See if we have in progress content\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n                            switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                                case 'text':\n                                    this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                                case 'image_file':\n                                    this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                            }\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n                    }\n                    __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n                }\n            }\n            break;\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //We emit the latest content we were working on on completion (including incomplete)\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n                const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n                if (currentContent) {\n                    switch (currentContent.type) {\n                        case 'image_file':\n                            this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                        case 'text':\n                            this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                    }\n                }\n            }\n            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n                this._emit('messageDone', event.data);\n            }\n            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n    }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n    const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n    __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n    switch (event.event) {\n        case 'thread.run.step.created':\n            this._emit('runStepCreated', event.data);\n            break;\n        case 'thread.run.step.delta':\n            const delta = event.data.delta;\n            if (delta.step_details &&\n                delta.step_details.type == 'tool_calls' &&\n                delta.step_details.tool_calls &&\n                accumulatedRunStep.step_details.type == 'tool_calls') {\n                for (const toolCall of delta.step_details.tool_calls) {\n                    if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n                        this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n                    }\n                    else {\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                            this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"))\n                            this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    }\n                }\n            }\n            this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n            break;\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n            const details = event.data.step_details;\n            if (details.type == 'tool_calls') {\n                if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                    this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n                }\n            }\n            this._emit('runStepDone', event.data, accumulatedRunStep);\n            break;\n        case 'thread.run.step.in_progress':\n            break;\n    }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n    __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n    this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n    switch (event.event) {\n        case 'thread.run.step.created':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            return event.data;\n        case 'thread.run.step.delta':\n            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n            if (!snapshot) {\n                throw Error('Received a RunStepDelta before creation of a snapshot');\n            }\n            let data = event.data;\n            if (data.delta) {\n                const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);\n                __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n            }\n            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n        case 'thread.run.step.in_progress':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            break;\n    }\n    if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id])\n        return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n    let newContent = [];\n    switch (event.event) {\n        case 'thread.message.created':\n            //On creation the snapshot is just the initial message\n            return [event.data, newContent];\n        case 'thread.message.delta':\n            if (!snapshot) {\n                throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n            }\n            let data = event.data;\n            //If this delta does not have content, nothing to process\n            if (data.delta.content) {\n                for (const contentElement of data.delta.content) {\n                    if (contentElement.index in snapshot.content) {\n                        let currentContent = snapshot.content[contentElement.index];\n                        snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n                    }\n                    else {\n                        snapshot.content[contentElement.index] = contentElement;\n                        //This is a new element\n                        newContent.push(contentElement);\n                    }\n                }\n            }\n            return [snapshot, newContent];\n        case 'thread.message.in_progress':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //No changes on other thread events\n            if (snapshot) {\n                return [snapshot, newContent];\n            }\n            else {\n                throw Error('Received thread message event with no existing snapshot');\n            }\n    }\n    throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n    return AssistantStream.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n    __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n    switch (event.event) {\n        case 'thread.run.created':\n            break;\n        case 'thread.run.queued':\n            break;\n        case 'thread.run.in_progress':\n            break;\n        case 'thread.run.requires_action':\n        case 'thread.run.cancelled':\n        case 'thread.run.failed':\n        case 'thread.run.completed':\n        case 'thread.run.expired':\n            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n            }\n            break;\n        case 'thread.run.cancelling':\n            break;\n    }\n};\n//# sourceMappingURL=AssistantStream.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as FilesAPI from 'openai/resources/beta/threads/messages/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Files extends APIResource {\n    /**\n     * Retrieves a message file.\n     */\n    retrieve(threadId, messageId, fileId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}/files/${fileId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(threadId, messageId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list(threadId, messageId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages/${messageId}/files`, MessageFilesPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n}\nexport class MessageFilesPage extends CursorPage {\n}\n(function (Files) {\n    Files.MessageFilesPage = FilesAPI.MessageFilesPage;\n})(Files || (Files = {}));\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as FilesAPI from 'openai/resources/beta/threads/messages/files';\nimport { CursorPage } from 'openai/pagination';\nexport class Messages extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n    }\n    /**\n     * Create a message.\n     */\n    create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Retrieve a message.\n     */\n    retrieve(threadId, messageId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Modifies a message.\n     */\n    update(threadId, messageId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(threadId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n}\nexport class MessagesPage extends CursorPage {\n}\n(function (Messages) {\n    Messages.MessagesPage = MessagesAPI.MessagesPage;\n    Messages.Files = FilesAPI.Files;\n    Messages.MessageFilesPage = FilesAPI.MessageFilesPage;\n})(Messages || (Messages = {}));\n//# sourceMappingURL=messages.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as StepsAPI from 'openai/resources/beta/threads/runs/steps';\nimport { CursorPage } from 'openai/pagination';\nexport class Steps extends APIResource {\n    /**\n     * Retrieves a run step.\n     */\n    retrieve(threadId, runId, stepId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(threadId, runId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list(threadId, runId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n}\nexport class RunStepsPage extends CursorPage {\n}\n(function (Steps) {\n    Steps.RunStepsPage = StepsAPI.RunStepsPage;\n})(Steps || (Steps = {}));\n//# sourceMappingURL=steps.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport { AssistantStream } from 'openai/lib/AssistantStream';\nimport * as RunsAPI from 'openai/resources/beta/threads/runs/runs';\nimport * as StepsAPI from 'openai/resources/beta/threads/runs/steps';\nimport { CursorPage } from 'openai/pagination';\nexport class Runs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.steps = new StepsAPI.Steps(this._client);\n    }\n    create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * Retrieves a run.\n     */\n    retrieve(threadId, runId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Modifies a run.\n     */\n    update(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    list(threadId, query = {}, options) {\n        if (isRequestOptions(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n            query,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     */\n    cancel(threadId, runId, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Create a Run stream\n     */\n    createAndStream(threadId, body, options) {\n        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    submitToolOutputs(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * Submit the tool outputs from a previous run and stream the run to a terminal\n     * state.\n     */\n    submitToolOutputsStream(threadId, runId, body, options) {\n        return AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);\n    }\n}\nexport class RunsPage extends CursorPage {\n}\n(function (Runs) {\n    Runs.RunsPage = RunsAPI.RunsPage;\n    Runs.Steps = StepsAPI.Steps;\n    Runs.RunStepsPage = StepsAPI.RunStepsPage;\n})(Runs || (Runs = {}));\n//# sourceMappingURL=runs.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport { AssistantStream } from 'openai/lib/AssistantStream';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as RunsAPI from 'openai/resources/beta/threads/runs/runs';\nexport class Threads extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.runs = new RunsAPI.Runs(this._client);\n        this.messages = new MessagesAPI.Messages(this._client);\n    }\n    create(body = {}, options) {\n        if (isRequestOptions(body)) {\n            return this.create({}, body);\n        }\n        return this._client.post('/threads', {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Retrieves a thread.\n     */\n    retrieve(threadId, options) {\n        return this._client.get(`/threads/${threadId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Modifies a thread.\n     */\n    update(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}`, {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    /**\n     * Delete a thread.\n     */\n    del(threadId, options) {\n        return this._client.delete(`/threads/${threadId}`, {\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n        });\n    }\n    createAndRun(body, options) {\n        return this._client.post('/threads/runs', {\n            body,\n            ...options,\n            headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * Create a thread and stream the run back\n     */\n    createAndRunStream(body, options) {\n        return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n    }\n}\n(function (Threads) {\n    Threads.Runs = RunsAPI.Runs;\n    Threads.RunsPage = RunsAPI.RunsPage;\n    Threads.Messages = MessagesAPI.Messages;\n    Threads.MessagesPage = MessagesAPI.MessagesPage;\n})(Threads || (Threads = {}));\n//# sourceMappingURL=threads.mjs.map","// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport * as AssistantsAPI from 'openai/resources/beta/assistants/assistants';\nimport * as ChatAPI from 'openai/resources/beta/chat/chat';\nimport * as ThreadsAPI from 'openai/resources/beta/threads/threads';\nexport class Beta extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.chat = new ChatAPI.Chat(this._client);\n        this.assistants = new AssistantsAPI.Assistants(this._client);\n        this.threads = new ThreadsAPI.Threads(this._client);\n    }\n}\n(function (Beta) {\n    Beta.Chat = ChatAPI.Chat;\n    Beta.Assistants = AssistantsAPI.Assistants;\n    Beta.AssistantsPage = AssistantsAPI.AssistantsPage;\n    Beta.Threads = ThreadsAPI.Threads;\n})(Beta || (Beta = {}));\n//# sourceMappingURL=beta.mjs.map","// File generated from our OpenAPI spec by Stainless.\nvar _a;\nimport * as Core from \"./core.mjs\";\nimport * as Errors from \"./error.mjs\";\nimport * as Uploads from \"./uploads.mjs\";\nimport * as Pagination from 'openai/pagination';\nimport * as API from 'openai/resources/index';\n/** API Client for interfacing with the OpenAI API. */\nexport class OpenAI extends Core.APIClient {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = Core.readEnv('OPENAI_BASE_URL'), apiKey = Core.readEnv('OPENAI_API_KEY'), organization = Core.readEnv('OPENAI_ORG_ID') ?? null, ...opts } = {}) {\n        if (apiKey === undefined) {\n            throw new Errors.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            ...opts,\n            baseURL: baseURL || `https://api.openai.com/v1`,\n        };\n        if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\n            throw new Errors.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        super({\n            baseURL: options.baseURL,\n            timeout: options.timeout ?? 600000 /* 10 minutes */,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch,\n        });\n        this.completions = new API.Completions(this);\n        this.chat = new API.Chat(this);\n        this.embeddings = new API.Embeddings(this);\n        this.files = new API.Files(this);\n        this.images = new API.Images(this);\n        this.audio = new API.Audio(this);\n        this.moderations = new API.Moderations(this);\n        this.models = new API.Models(this);\n        this.fineTuning = new API.FineTuning(this);\n        this.beta = new API.Beta(this);\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            'OpenAI-Organization': this.organization,\n            ...this._options.defaultHeaders,\n        };\n    }\n    authHeaders(opts) {\n        return { Authorization: `Bearer ${this.apiKey}` };\n    }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.OpenAIError = Errors.OpenAIError;\nOpenAI.APIError = Errors.APIError;\nOpenAI.APIConnectionError = Errors.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = Errors.APIUserAbortError;\nOpenAI.NotFoundError = Errors.NotFoundError;\nOpenAI.ConflictError = Errors.ConflictError;\nOpenAI.RateLimitError = Errors.RateLimitError;\nOpenAI.BadRequestError = Errors.BadRequestError;\nOpenAI.AuthenticationError = Errors.AuthenticationError;\nOpenAI.InternalServerError = Errors.InternalServerError;\nOpenAI.PermissionDeniedError = Errors.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = Errors.UnprocessableEntityError;\nexport const { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } = Errors;\nexport var toFile = Uploads.toFile;\nexport var fileFromPath = Uploads.fileFromPath;\n(function (OpenAI) {\n    // Helper functions\n    OpenAI.toFile = Uploads.toFile;\n    OpenAI.fileFromPath = Uploads.fileFromPath;\n    OpenAI.Page = Pagination.Page;\n    OpenAI.CursorPage = Pagination.CursorPage;\n    OpenAI.Completions = API.Completions;\n    OpenAI.Chat = API.Chat;\n    OpenAI.Embeddings = API.Embeddings;\n    OpenAI.Files = API.Files;\n    OpenAI.FileObjectsPage = API.FileObjectsPage;\n    OpenAI.Images = API.Images;\n    OpenAI.Audio = API.Audio;\n    OpenAI.Moderations = API.Moderations;\n    OpenAI.Models = API.Models;\n    OpenAI.ModelsPage = API.ModelsPage;\n    OpenAI.FineTuning = API.FineTuning;\n    OpenAI.Beta = API.Beta;\n})(OpenAI || (OpenAI = {}));\nexport default OpenAI;\n//# sourceMappingURL=index.mjs.map","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nexport { nanoid, customAlphabet }\n","function createParser(onParse) {\n  let isFirstChunk;\n  let buffer;\n  let startingPosition;\n  let startingFieldLength;\n  let eventId;\n  let eventName;\n  let data;\n  reset();\n  return {\n    feed,\n    reset\n  };\n  function reset() {\n    isFirstChunk = true;\n    buffer = \"\";\n    startingPosition = 0;\n    startingFieldLength = -1;\n    eventId = void 0;\n    eventName = void 0;\n    data = \"\";\n  }\n  function feed(chunk) {\n    buffer = buffer ? buffer + chunk : chunk;\n    if (isFirstChunk && hasBom(buffer)) {\n      buffer = buffer.slice(BOM.length);\n    }\n    isFirstChunk = false;\n    const length = buffer.length;\n    let position = 0;\n    let discardTrailingNewline = false;\n    while (position < length) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === \"\\n\") {\n          ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineLength = -1;\n      let fieldLength = startingFieldLength;\n      let character;\n      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {\n        character = buffer[index];\n        if (character === \":\" && fieldLength < 0) {\n          fieldLength = index - position;\n        } else if (character === \"\\r\") {\n          discardTrailingNewline = true;\n          lineLength = index - position;\n        } else if (character === \"\\n\") {\n          lineLength = index - position;\n        }\n      }\n      if (lineLength < 0) {\n        startingPosition = length - position;\n        startingFieldLength = fieldLength;\n        break;\n      } else {\n        startingPosition = 0;\n        startingFieldLength = -1;\n      }\n      parseEventStreamLine(buffer, position, fieldLength, lineLength);\n      position += lineLength + 1;\n    }\n    if (position === length) {\n      buffer = \"\";\n    } else if (position > 0) {\n      buffer = buffer.slice(position);\n    }\n  }\n  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        onParse({\n          type: \"event\",\n          id: eventId,\n          event: eventName || void 0,\n          data: data.slice(0, -1)\n          // remove trailing newline\n        });\n\n        data = \"\";\n        eventId = void 0;\n      }\n      eventName = void 0;\n      return;\n    }\n    const noValue = fieldLength < 0;\n    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n    let step = 0;\n    if (noValue) {\n      step = lineLength;\n    } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n      step = fieldLength + 2;\n    } else {\n      step = fieldLength + 1;\n    }\n    const position = index + step;\n    const valueLength = lineLength - step;\n    const value = lineBuffer.slice(position, position + valueLength).toString();\n    if (field === \"data\") {\n      data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n    } else if (field === \"event\") {\n      eventName = value;\n    } else if (field === \"id\" && !value.includes(\"\\0\")) {\n      eventId = value;\n    } else if (field === \"retry\") {\n      const retry = parseInt(value, 10);\n      if (!Number.isNaN(retry)) {\n        onParse({\n          type: \"reconnect-interval\",\n          value: retry\n        });\n      }\n    }\n  }\n}\nconst BOM = [239, 187, 191];\nfunction hasBom(buffer) {\n  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);\n}\nexport { createParser };\n//# sourceMappingURL=index.js.map\n","// shared/utils.ts\nimport { customAlphabet } from \"nanoid/non-secure\";\n\n// shared/stream-parts.ts\nvar textStreamPart = {\n  code: \"0\",\n  name: \"text\",\n  parse: (value) => {\n    if (typeof value !== \"string\") {\n      throw new Error('\"text\" parts expect a string value.');\n    }\n    return { type: \"text\", value };\n  }\n};\nvar functionCallStreamPart = {\n  code: \"1\",\n  name: \"function_call\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n      throw new Error(\n        '\"function_call\" parts expect an object with a \"function_call\" property.'\n      );\n    }\n    return {\n      type: \"function_call\",\n      value\n    };\n  }\n};\nvar dataStreamPart = {\n  code: \"2\",\n  name: \"data\",\n  parse: (value) => {\n    if (!Array.isArray(value)) {\n      throw new Error('\"data\" parts expect an array value.');\n    }\n    return { type: \"data\", value };\n  }\n};\nvar errorStreamPart = {\n  code: \"3\",\n  name: \"error\",\n  parse: (value) => {\n    if (typeof value !== \"string\") {\n      throw new Error('\"error\" parts expect a string value.');\n    }\n    return { type: \"error\", value };\n  }\n};\nvar assistantMessageStreamPart = {\n  code: \"4\",\n  name: \"assistant_message\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every(\n      (item) => item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\"\n    )) {\n      throw new Error(\n        '\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.'\n      );\n    }\n    return {\n      type: \"assistant_message\",\n      value\n    };\n  }\n};\nvar assistantControlDataStreamPart = {\n  code: \"5\",\n  name: \"assistant_control_data\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n      throw new Error(\n        '\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.'\n      );\n    }\n    return {\n      type: \"assistant_control_data\",\n      value: {\n        threadId: value.threadId,\n        messageId: value.messageId\n      }\n    };\n  }\n};\nvar dataMessageStreamPart = {\n  code: \"6\",\n  name: \"data_message\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n      throw new Error(\n        '\"data_message\" parts expect an object with a \"role\" and \"data\" property.'\n      );\n    }\n    return {\n      type: \"data_message\",\n      value\n    };\n  }\n};\nvar toolCallStreamPart = {\n  code: \"7\",\n  name: \"tool_calls\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"tool_calls\" in value) || typeof value.tool_calls !== \"object\" || value.tool_calls == null || !Array.isArray(value.tool_calls) || value.tool_calls.some((tc) => {\n      tc == null || typeof tc !== \"object\" || !(\"id\" in tc) || typeof tc.id !== \"string\" || !(\"type\" in tc) || typeof tc.type !== \"string\" || !(\"function\" in tc) || tc.function == null || typeof tc.function !== \"object\" || !(\"arguments\" in tc.function) || typeof tc.function.name !== \"string\" || typeof tc.function.arguments !== \"string\";\n    })) {\n      throw new Error(\n        '\"tool_calls\" parts expect an object with a ToolCallPayload.'\n      );\n    }\n    return {\n      type: \"tool_calls\",\n      value\n    };\n  }\n};\nvar messageAnnotationsStreamPart = {\n  code: \"8\",\n  name: \"message_annotations\",\n  parse: (value) => {\n    if (!Array.isArray(value)) {\n      throw new Error('\"message_annotations\" parts expect an array value.');\n    }\n    return { type: \"message_annotations\", value };\n  }\n};\nvar streamParts = [\n  textStreamPart,\n  functionCallStreamPart,\n  dataStreamPart,\n  errorStreamPart,\n  assistantMessageStreamPart,\n  assistantControlDataStreamPart,\n  dataMessageStreamPart,\n  toolCallStreamPart,\n  messageAnnotationsStreamPart\n];\nvar streamPartsByCode = {\n  [textStreamPart.code]: textStreamPart,\n  [functionCallStreamPart.code]: functionCallStreamPart,\n  [dataStreamPart.code]: dataStreamPart,\n  [errorStreamPart.code]: errorStreamPart,\n  [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n  [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n  [dataMessageStreamPart.code]: dataMessageStreamPart,\n  [toolCallStreamPart.code]: toolCallStreamPart,\n  [messageAnnotationsStreamPart.code]: messageAnnotationsStreamPart\n};\nvar StreamStringPrefixes = {\n  [textStreamPart.name]: textStreamPart.code,\n  [functionCallStreamPart.name]: functionCallStreamPart.code,\n  [dataStreamPart.name]: dataStreamPart.code,\n  [errorStreamPart.name]: errorStreamPart.code,\n  [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n  [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n  [dataMessageStreamPart.name]: dataMessageStreamPart.code,\n  [toolCallStreamPart.name]: toolCallStreamPart.code,\n  [messageAnnotationsStreamPart.name]: messageAnnotationsStreamPart.code\n};\nvar validCodes = streamParts.map((part) => part.code);\nvar parseStreamPart = (line) => {\n  const firstSeparatorIndex = line.indexOf(\":\");\n  if (firstSeparatorIndex === -1) {\n    throw new Error(\"Failed to parse stream string. No separator found.\");\n  }\n  const prefix = line.slice(0, firstSeparatorIndex);\n  if (!validCodes.includes(prefix)) {\n    throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n  }\n  const code = prefix;\n  const textValue = line.slice(firstSeparatorIndex + 1);\n  const jsonValue = JSON.parse(textValue);\n  return streamPartsByCode[code].parse(jsonValue);\n};\nfunction formatStreamPart(type, value) {\n  const streamPart = streamParts.find((part) => part.name === type);\n  if (!streamPart) {\n    throw new Error(`Invalid stream part type: ${type}`);\n  }\n  return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n\n// shared/utils.ts\nvar nanoid = customAlphabet(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  7\n);\nfunction createChunkDecoder(complex) {\n  const decoder = new TextDecoder();\n  if (!complex) {\n    return function(chunk) {\n      if (!chunk)\n        return \"\";\n      return decoder.decode(chunk, { stream: true });\n    };\n  }\n  return function(chunk) {\n    const decoded = decoder.decode(chunk, { stream: true }).split(\"\\n\").filter((line) => line !== \"\");\n    return decoded.map(parseStreamPart).filter(Boolean);\n  };\n}\nvar isStreamStringEqualToType = (type, value) => value.startsWith(`${StreamStringPrefixes[type]}:`) && value.endsWith(\"\\n\");\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n\n// streams/ai-stream.ts\nimport {\n  createParser\n} from \"eventsource-parser\";\nfunction createEventStreamTransformer(customParser) {\n  const textDecoder = new TextDecoder();\n  let eventSourceParser;\n  return new TransformStream({\n    async start(controller) {\n      eventSourceParser = createParser(\n        (event) => {\n          if (\"data\" in event && event.type === \"event\" && event.data === \"[DONE]\" || // Replicate doesn't send [DONE] but does send a 'done' event\n          // @see https://replicate.com/docs/streaming\n          event.event === \"done\") {\n            controller.terminate();\n            return;\n          }\n          if (\"data\" in event) {\n            const parsedMessage = customParser ? customParser(event.data, {\n              event: event.event\n            }) : event.data;\n            if (parsedMessage)\n              controller.enqueue(parsedMessage);\n          }\n        }\n      );\n    },\n    transform(chunk) {\n      eventSourceParser.feed(textDecoder.decode(chunk));\n    }\n  });\n}\nfunction createCallbacksTransformer(cb) {\n  const textEncoder = new TextEncoder();\n  let aggregatedResponse = \"\";\n  const callbacks = cb || {};\n  return new TransformStream({\n    async start() {\n      if (callbacks.onStart)\n        await callbacks.onStart();\n    },\n    async transform(message, controller) {\n      const content = typeof message === \"string\" ? message : message.content;\n      controller.enqueue(textEncoder.encode(content));\n      aggregatedResponse += content;\n      if (callbacks.onToken)\n        await callbacks.onToken(content);\n      if (callbacks.onText && typeof message === \"string\") {\n        await callbacks.onText(message);\n      }\n    },\n    async flush() {\n      const isOpenAICallbacks = isOfTypeOpenAIStreamCallbacks(callbacks);\n      if (callbacks.onCompletion) {\n        await callbacks.onCompletion(aggregatedResponse);\n      }\n      if (callbacks.onFinal && !isOpenAICallbacks) {\n        await callbacks.onFinal(aggregatedResponse);\n      }\n    }\n  });\n}\nfunction isOfTypeOpenAIStreamCallbacks(callbacks) {\n  return \"experimental_onFunctionCall\" in callbacks;\n}\nfunction trimStartOfStreamHelper() {\n  let isStreamStart = true;\n  return (text) => {\n    if (isStreamStart) {\n      text = text.trimStart();\n      if (text)\n        isStreamStart = false;\n    }\n    return text;\n  };\n}\nfunction AIStream(response, customParser, callbacks) {\n  if (!response.ok) {\n    if (response.body) {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        async start(controller) {\n          const { done, value } = await reader.read();\n          if (!done) {\n            const errorText = new TextDecoder().decode(value);\n            controller.error(new Error(`Response error: ${errorText}`));\n          }\n        }\n      });\n    } else {\n      return new ReadableStream({\n        start(controller) {\n          controller.error(new Error(\"Response error: No response body\"));\n        }\n      });\n    }\n  }\n  const responseBodyStream = response.body || createEmptyReadableStream();\n  return responseBodyStream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));\n}\nfunction createEmptyReadableStream() {\n  return new ReadableStream({\n    start(controller) {\n      controller.close();\n    }\n  });\n}\nfunction readableFromAsyncIterable(iterable) {\n  let it = iterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const { done, value } = await it.next();\n      if (done)\n        controller.close();\n      else\n        controller.enqueue(value);\n    },\n    async cancel(reason) {\n      var _a;\n      await ((_a = it.return) == null ? void 0 : _a.call(it, reason));\n    }\n  });\n}\n\n// streams/stream-data.ts\nvar experimental_StreamData = class {\n  constructor() {\n    this.encoder = new TextEncoder();\n    this.controller = null;\n    // closing the stream is synchronous, but we want to return a promise\n    // in case we're doing async work\n    this.isClosedPromise = null;\n    this.isClosedPromiseResolver = void 0;\n    this.isClosed = false;\n    // array to store appended data\n    this.data = [];\n    this.messageAnnotations = [];\n    this.isClosedPromise = new Promise((resolve) => {\n      this.isClosedPromiseResolver = resolve;\n    });\n    const self = this;\n    this.stream = new TransformStream({\n      start: async (controller) => {\n        self.controller = controller;\n      },\n      transform: async (chunk, controller) => {\n        if (self.data.length > 0) {\n          const encodedData = self.encoder.encode(\n            formatStreamPart(\"data\", self.data)\n          );\n          self.data = [];\n          controller.enqueue(encodedData);\n        }\n        if (self.messageAnnotations.length) {\n          const encodedMessageAnnotations = self.encoder.encode(\n            formatStreamPart(\"message_annotations\", self.messageAnnotations)\n          );\n          self.messageAnnotations = [];\n          controller.enqueue(encodedMessageAnnotations);\n        }\n        controller.enqueue(chunk);\n      },\n      async flush(controller) {\n        const warningTimeout = process.env.NODE_ENV === \"development\" ? setTimeout(() => {\n          console.warn(\n            \"The data stream is hanging. Did you forget to close it with `data.close()`?\"\n          );\n        }, 3e3) : null;\n        await self.isClosedPromise;\n        if (warningTimeout !== null) {\n          clearTimeout(warningTimeout);\n        }\n        if (self.data.length) {\n          const encodedData = self.encoder.encode(\n            formatStreamPart(\"data\", self.data)\n          );\n          controller.enqueue(encodedData);\n        }\n        if (self.messageAnnotations.length) {\n          const encodedData = self.encoder.encode(\n            formatStreamPart(\"message_annotations\", self.messageAnnotations)\n          );\n          controller.enqueue(encodedData);\n        }\n      }\n    });\n  }\n  async close() {\n    var _a;\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    if (!this.controller) {\n      throw new Error(\"Stream controller is not initialized.\");\n    }\n    (_a = this.isClosedPromiseResolver) == null ? void 0 : _a.call(this);\n    this.isClosed = true;\n  }\n  append(value) {\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    this.data.push(value);\n  }\n  appendMessageAnnotation(value) {\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    this.messageAnnotations.push(value);\n  }\n};\nfunction createStreamDataTransformer(experimental_streamData) {\n  if (!experimental_streamData) {\n    return new TransformStream({\n      transform: async (chunk, controller) => {\n        controller.enqueue(chunk);\n      }\n    });\n  }\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n  return new TransformStream({\n    transform: async (chunk, controller) => {\n      const message = decoder.decode(chunk);\n      controller.enqueue(encoder.encode(formatStreamPart(\"text\", message)));\n    }\n  });\n}\n\n// streams/anthropic-stream.ts\nfunction parseAnthropicStream() {\n  let previous = \"\";\n  return (data) => {\n    const json = JSON.parse(data);\n    if (\"error\" in json) {\n      throw new Error(`${json.error.type}: ${json.error.message}`);\n    }\n    if (!(\"completion\" in json)) {\n      return;\n    }\n    const text = json.completion;\n    if (!previous || text.length > previous.length && text.startsWith(previous)) {\n      const delta = text.slice(previous.length);\n      previous = text;\n      return delta;\n    }\n    return text;\n  };\n}\nasync function* streamable(stream) {\n  for await (const chunk of stream) {\n    if (\"completion\" in chunk) {\n      const text = chunk.completion;\n      if (text)\n        yield text;\n    } else if (\"delta\" in chunk) {\n      const { delta } = chunk;\n      if (\"text\" in delta) {\n        const text = delta.text;\n        if (text)\n          yield text;\n      }\n    }\n  }\n}\nfunction AnthropicStream(res, cb) {\n  if (Symbol.asyncIterator in res) {\n    return readableFromAsyncIterable(streamable(res)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n  } else {\n    return AIStream(res, parseAnthropicStream(), cb).pipeThrough(\n      createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData)\n    );\n  }\n}\n\n// streams/assistant-response.ts\nfunction experimental_AssistantResponse({ threadId, messageId }, process2) {\n  const stream = new ReadableStream({\n    async start(controller) {\n      var _a;\n      const textEncoder = new TextEncoder();\n      const sendMessage = (message) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"assistant_message\", message))\n        );\n      };\n      const sendDataMessage = (message) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"data_message\", message))\n        );\n      };\n      const sendError = (errorMessage) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"error\", errorMessage))\n        );\n      };\n      const forwardStream = async (stream2) => {\n        var _a2, _b;\n        let result = void 0;\n        for await (const value of stream2) {\n          switch (value.event) {\n            case \"thread.message.created\": {\n              controller.enqueue(\n                textEncoder.encode(\n                  formatStreamPart(\"assistant_message\", {\n                    id: value.data.id,\n                    role: \"assistant\",\n                    content: [{ type: \"text\", text: { value: \"\" } }]\n                  })\n                )\n              );\n              break;\n            }\n            case \"thread.message.delta\": {\n              const content = (_a2 = value.data.delta.content) == null ? void 0 : _a2[0];\n              if ((content == null ? void 0 : content.type) === \"text\" && ((_b = content.text) == null ? void 0 : _b.value) != null) {\n                controller.enqueue(\n                  textEncoder.encode(\n                    formatStreamPart(\"text\", content.text.value)\n                  )\n                );\n              }\n              break;\n            }\n            case \"thread.run.completed\":\n            case \"thread.run.requires_action\": {\n              result = value.data;\n              break;\n            }\n          }\n        }\n        return result;\n      };\n      controller.enqueue(\n        textEncoder.encode(\n          formatStreamPart(\"assistant_control_data\", {\n            threadId,\n            messageId\n          })\n        )\n      );\n      try {\n        await process2({\n          threadId,\n          messageId,\n          sendMessage,\n          sendDataMessage,\n          forwardStream\n        });\n      } catch (error) {\n        sendError((_a = error.message) != null ? _a : `${error}`);\n      } finally {\n        controller.close();\n      }\n    },\n    pull(controller) {\n    },\n    cancel() {\n    }\n  });\n  return new Response(stream, {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"text/plain; charset=utf-8\"\n    }\n  });\n}\n\n// streams/aws-bedrock-stream.ts\nasync function* asDeltaIterable(response, extractTextDeltaFromChunk) {\n  var _a, _b;\n  const decoder = new TextDecoder();\n  for await (const chunk of (_a = response.body) != null ? _a : []) {\n    const bytes = (_b = chunk.chunk) == null ? void 0 : _b.bytes;\n    if (bytes != null) {\n      const chunkText = decoder.decode(bytes);\n      const chunkJSON = JSON.parse(chunkText);\n      const delta = extractTextDeltaFromChunk(chunkJSON);\n      if (delta != null) {\n        yield delta;\n      }\n    }\n  }\n}\nfunction AWSBedrockAnthropicStream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => chunk.completion);\n}\nfunction AWSBedrockCohereStream(response, callbacks) {\n  return AWSBedrockStream(\n    response,\n    callbacks,\n    // As of 2023-11-17, Bedrock does not support streaming for Cohere,\n    // so we take the full generation:\n    (chunk) => {\n      var _a, _b;\n      return (_b = (_a = chunk.generations) == null ? void 0 : _a[0]) == null ? void 0 : _b.text;\n    }\n  );\n}\nfunction AWSBedrockLlama2Stream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => chunk.generation);\n}\nfunction AWSBedrockStream(response, callbacks, extractTextDeltaFromChunk) {\n  return readableFromAsyncIterable(\n    asDeltaIterable(response, extractTextDeltaFromChunk)\n  ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n    createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n  );\n}\n\n// streams/cohere-stream.ts\nvar utf8Decoder = new TextDecoder(\"utf-8\");\nasync function processLines(lines, controller) {\n  for (const line of lines) {\n    const { text, is_finished } = JSON.parse(line);\n    if (!is_finished) {\n      controller.enqueue(text);\n    }\n  }\n}\nasync function readAndProcessLines(reader, controller) {\n  let segment = \"\";\n  while (true) {\n    const { value: chunk, done } = await reader.read();\n    if (done) {\n      break;\n    }\n    segment += utf8Decoder.decode(chunk, { stream: true });\n    const linesArray = segment.split(/\\r\\n|\\n|\\r/g);\n    segment = linesArray.pop() || \"\";\n    await processLines(linesArray, controller);\n  }\n  if (segment) {\n    const linesArray = [segment];\n    await processLines(linesArray, controller);\n  }\n  controller.close();\n}\nfunction createParser2(res) {\n  var _a;\n  const reader = (_a = res.body) == null ? void 0 : _a.getReader();\n  return new ReadableStream({\n    async start(controller) {\n      if (!reader) {\n        controller.close();\n        return;\n      }\n      await readAndProcessLines(reader, controller);\n    }\n  });\n}\nasync function* streamable2(stream) {\n  for await (const chunk of stream) {\n    if (chunk.eventType === \"text-generation\") {\n      const text = chunk.text;\n      if (text)\n        yield text;\n    }\n  }\n}\nfunction CohereStream(reader, callbacks) {\n  if (Symbol.asyncIterator in reader) {\n    return readableFromAsyncIterable(streamable2(reader)).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n      createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n    );\n  } else {\n    return createParser2(reader).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n      createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n    );\n  }\n}\n\n// streams/google-generative-ai-stream.ts\nasync function* streamable3(response) {\n  var _a, _b, _c;\n  for await (const chunk of response.stream) {\n    const parts = (_c = (_b = (_a = chunk.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts;\n    if (parts === void 0) {\n      continue;\n    }\n    const firstPart = parts[0];\n    if (typeof firstPart.text === \"string\") {\n      yield firstPart.text;\n    }\n  }\n}\nfunction GoogleGenerativeAIStream(response, cb) {\n  return readableFromAsyncIterable(streamable3(response)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData));\n}\n\n// streams/huggingface-stream.ts\nfunction createParser3(res) {\n  const trimStartOfStream = trimStartOfStreamHelper();\n  return new ReadableStream({\n    async pull(controller) {\n      var _a, _b;\n      const { value, done } = await res.next();\n      if (done) {\n        controller.close();\n        return;\n      }\n      const text = trimStartOfStream((_b = (_a = value.token) == null ? void 0 : _a.text) != null ? _b : \"\");\n      if (!text)\n        return;\n      if (value.generated_text != null && value.generated_text.length > 0) {\n        return;\n      }\n      if (text === \"</s>\" || text === \"<|endoftext|>\" || text === \"<|end|>\") {\n        return;\n      }\n      controller.enqueue(text);\n    }\n  });\n}\nfunction HuggingFaceStream(res, callbacks) {\n  return createParser3(res).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n    createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n  );\n}\n\n// streams/inkeep-stream.ts\nfunction InkeepStream(res, callbacks) {\n  if (!res.body) {\n    throw new Error(\"Response body is null\");\n  }\n  let chat_session_id = \"\";\n  let records_cited;\n  const inkeepEventParser = (data, options) => {\n    var _a, _b;\n    const { event } = options;\n    if (event === \"records_cited\") {\n      records_cited = JSON.parse(data);\n      (_a = callbacks == null ? void 0 : callbacks.onRecordsCited) == null ? void 0 : _a.call(callbacks, records_cited);\n    }\n    if (event === \"message_chunk\") {\n      const inkeepMessageChunk = JSON.parse(data);\n      chat_session_id = (_b = inkeepMessageChunk.chat_session_id) != null ? _b : chat_session_id;\n      return inkeepMessageChunk.content_chunk;\n    }\n    return;\n  };\n  let { onRecordsCited, ...passThroughCallbacks } = callbacks || {};\n  passThroughCallbacks = {\n    ...passThroughCallbacks,\n    onFinal: (completion) => {\n      var _a;\n      const inkeepOnFinalMetadata = {\n        chat_session_id,\n        records_cited\n      };\n      (_a = callbacks == null ? void 0 : callbacks.onFinal) == null ? void 0 : _a.call(callbacks, completion, inkeepOnFinalMetadata);\n    }\n  };\n  return AIStream(res, inkeepEventParser, passThroughCallbacks).pipeThrough(\n    createStreamDataTransformer(passThroughCallbacks == null ? void 0 : passThroughCallbacks.experimental_streamData)\n  );\n}\n\n// streams/langchain-stream.ts\nfunction LangChainStream(callbacks) {\n  const stream = new TransformStream();\n  const writer = stream.writable.getWriter();\n  const runs = /* @__PURE__ */ new Set();\n  const handleError = async (e, runId) => {\n    runs.delete(runId);\n    await writer.ready;\n    await writer.abort(e);\n  };\n  const handleStart = async (runId) => {\n    runs.add(runId);\n  };\n  const handleEnd = async (runId) => {\n    runs.delete(runId);\n    if (runs.size === 0) {\n      await writer.ready;\n      await writer.close();\n    }\n  };\n  return {\n    stream: stream.readable.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n      createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n    ),\n    writer,\n    handlers: {\n      handleLLMNewToken: async (token) => {\n        await writer.ready;\n        await writer.write(token);\n      },\n      handleLLMStart: async (_llm, _prompts, runId) => {\n        handleStart(runId);\n      },\n      handleLLMEnd: async (_output, runId) => {\n        await handleEnd(runId);\n      },\n      handleLLMError: async (e, runId) => {\n        await handleError(e, runId);\n      },\n      handleChainStart: async (_chain, _inputs, runId) => {\n        handleStart(runId);\n      },\n      handleChainEnd: async (_outputs, runId) => {\n        await handleEnd(runId);\n      },\n      handleChainError: async (e, runId) => {\n        await handleError(e, runId);\n      },\n      handleToolStart: async (_tool, _input, runId) => {\n        handleStart(runId);\n      },\n      handleToolEnd: async (_output, runId) => {\n        await handleEnd(runId);\n      },\n      handleToolError: async (e, runId) => {\n        await handleError(e, runId);\n      }\n    }\n  };\n}\n\n// streams/mistral-stream.ts\nasync function* streamable4(stream) {\n  var _a, _b;\n  for await (const chunk of stream) {\n    const content = (_b = (_a = chunk.choices[0]) == null ? void 0 : _a.delta) == null ? void 0 : _b.content;\n    if (content === void 0 || content === \"\") {\n      continue;\n    }\n    yield content;\n  }\n}\nfunction MistralStream(response, callbacks) {\n  const stream = readableFromAsyncIterable(streamable4(response));\n  return stream.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(\n    createStreamDataTransformer(callbacks == null ? void 0 : callbacks.experimental_streamData)\n  );\n}\n\n// streams/openai-stream.ts\nfunction parseOpenAIStream() {\n  const extract = chunkToText();\n  return (data) => extract(JSON.parse(data));\n}\nasync function* streamable5(stream) {\n  const extract = chunkToText();\n  for await (let chunk of stream) {\n    if (\"promptFilterResults\" in chunk) {\n      chunk = {\n        id: chunk.id,\n        created: chunk.created.getDate(),\n        object: chunk.object,\n        // not exposed by Azure API\n        model: chunk.model,\n        // not exposed by Azure API\n        choices: chunk.choices.map((choice) => {\n          var _a, _b, _c, _d, _e, _f, _g;\n          return {\n            delta: {\n              content: (_a = choice.delta) == null ? void 0 : _a.content,\n              function_call: (_b = choice.delta) == null ? void 0 : _b.functionCall,\n              role: (_c = choice.delta) == null ? void 0 : _c.role,\n              tool_calls: ((_e = (_d = choice.delta) == null ? void 0 : _d.toolCalls) == null ? void 0 : _e.length) ? (_g = (_f = choice.delta) == null ? void 0 : _f.toolCalls) == null ? void 0 : _g.map((toolCall, index) => ({\n                index,\n                id: toolCall.id,\n                function: toolCall.function,\n                type: toolCall.type\n              })) : void 0\n            },\n            finish_reason: choice.finishReason,\n            index: choice.index\n          };\n        })\n      };\n    }\n    const text = extract(chunk);\n    if (text)\n      yield text;\n  }\n}\nfunction chunkToText() {\n  const trimStartOfStream = trimStartOfStreamHelper();\n  let isFunctionStreamingIn;\n  return (json) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;\n    if (isChatCompletionChunk(json)) {\n      const delta = (_a = json.choices[0]) == null ? void 0 : _a.delta;\n      if ((_b = delta.function_call) == null ? void 0 : _b.name) {\n        isFunctionStreamingIn = true;\n        return {\n          isText: false,\n          content: `{\"function_call\": {\"name\": \"${delta.function_call.name}\", \"arguments\": \"`\n        };\n      } else if ((_e = (_d = (_c = delta.tool_calls) == null ? void 0 : _c[0]) == null ? void 0 : _d.function) == null ? void 0 : _e.name) {\n        isFunctionStreamingIn = true;\n        const toolCall = delta.tool_calls[0];\n        if (toolCall.index === 0) {\n          return {\n            isText: false,\n            content: `{\"tool_calls\":[ {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_f = toolCall.function) == null ? void 0 : _f.name}\", \"arguments\": \"`\n          };\n        } else {\n          return {\n            isText: false,\n            content: `\"}}, {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_g = toolCall.function) == null ? void 0 : _g.name}\", \"arguments\": \"`\n          };\n        }\n      } else if ((_h = delta.function_call) == null ? void 0 : _h.arguments) {\n        return {\n          isText: false,\n          content: cleanupArguments((_i = delta.function_call) == null ? void 0 : _i.arguments)\n        };\n      } else if ((_l = (_k = (_j = delta.tool_calls) == null ? void 0 : _j[0]) == null ? void 0 : _k.function) == null ? void 0 : _l.arguments) {\n        return {\n          isText: false,\n          content: cleanupArguments((_o = (_n = (_m = delta.tool_calls) == null ? void 0 : _m[0]) == null ? void 0 : _n.function) == null ? void 0 : _o.arguments)\n        };\n      } else if (isFunctionStreamingIn && (((_p = json.choices[0]) == null ? void 0 : _p.finish_reason) === \"function_call\" || ((_q = json.choices[0]) == null ? void 0 : _q.finish_reason) === \"stop\")) {\n        isFunctionStreamingIn = false;\n        return {\n          isText: false,\n          content: '\"}}'\n        };\n      } else if (isFunctionStreamingIn && ((_r = json.choices[0]) == null ? void 0 : _r.finish_reason) === \"tool_calls\") {\n        isFunctionStreamingIn = false;\n        return {\n          isText: false,\n          content: '\"}}]}'\n        };\n      }\n    }\n    const text = trimStartOfStream(\n      isChatCompletionChunk(json) && json.choices[0].delta.content ? json.choices[0].delta.content : isCompletion(json) ? json.choices[0].text : \"\"\n    );\n    return text;\n  };\n  function cleanupArguments(argumentChunk) {\n    let escapedPartialJson = argumentChunk.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\").replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\").replace(/\\f/g, \"\\\\f\");\n    return `${escapedPartialJson}`;\n  }\n}\nvar __internal__OpenAIFnMessagesSymbol = Symbol(\n  \"internal_openai_fn_messages\"\n);\nfunction isChatCompletionChunk(data) {\n  return \"choices\" in data && data.choices && data.choices[0] && \"delta\" in data.choices[0];\n}\nfunction isCompletion(data) {\n  return \"choices\" in data && data.choices && data.choices[0] && \"text\" in data.choices[0];\n}\nfunction OpenAIStream(res, callbacks) {\n  const cb = callbacks;\n  let stream;\n  if (Symbol.asyncIterator in res) {\n    stream = readableFromAsyncIterable(streamable5(res)).pipeThrough(\n      createCallbacksTransformer(\n        (cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n          ...cb,\n          onFinal: void 0\n        } : {\n          ...cb\n        }\n      )\n    );\n  } else {\n    stream = AIStream(\n      res,\n      parseOpenAIStream(),\n      (cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n        ...cb,\n        onFinal: void 0\n      } : {\n        ...cb\n      }\n    );\n  }\n  if (cb && (cb.experimental_onFunctionCall || cb.experimental_onToolCall)) {\n    const functionCallTransformer = createFunctionCallTransformer(cb);\n    return stream.pipeThrough(functionCallTransformer);\n  } else {\n    return stream.pipeThrough(\n      createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData)\n    );\n  }\n}\nfunction createFunctionCallTransformer(callbacks) {\n  const textEncoder = new TextEncoder();\n  let isFirstChunk = true;\n  let aggregatedResponse = \"\";\n  let aggregatedFinalCompletionResponse = \"\";\n  let isFunctionStreamingIn = false;\n  let functionCallMessages = callbacks[__internal__OpenAIFnMessagesSymbol] || [];\n  const isComplexMode = callbacks == null ? void 0 : callbacks.experimental_streamData;\n  const decode = createChunkDecoder();\n  return new TransformStream({\n    async transform(chunk, controller) {\n      const message = decode(chunk);\n      aggregatedFinalCompletionResponse += message;\n      const shouldHandleAsFunction = isFirstChunk && (message.startsWith('{\"function_call\":') || message.startsWith('{\"tool_calls\":'));\n      if (shouldHandleAsFunction) {\n        isFunctionStreamingIn = true;\n        aggregatedResponse += message;\n        isFirstChunk = false;\n        return;\n      }\n      if (!isFunctionStreamingIn) {\n        controller.enqueue(\n          isComplexMode ? textEncoder.encode(formatStreamPart(\"text\", message)) : chunk\n        );\n        return;\n      } else {\n        aggregatedResponse += message;\n      }\n    },\n    async flush(controller) {\n      try {\n        if (!isFirstChunk && isFunctionStreamingIn && (callbacks.experimental_onFunctionCall || callbacks.experimental_onToolCall)) {\n          isFunctionStreamingIn = false;\n          const payload = JSON.parse(aggregatedResponse);\n          let newFunctionCallMessages = [\n            ...functionCallMessages\n          ];\n          let functionResponse = void 0;\n          if (callbacks.experimental_onFunctionCall) {\n            if (payload.function_call === void 0) {\n              console.warn(\n                \"experimental_onFunctionCall should not be defined when using tools\"\n              );\n            }\n            const argumentsPayload = JSON.parse(\n              payload.function_call.arguments\n            );\n            functionResponse = await callbacks.experimental_onFunctionCall(\n              {\n                name: payload.function_call.name,\n                arguments: argumentsPayload\n              },\n              (result) => {\n                newFunctionCallMessages = [\n                  ...functionCallMessages,\n                  {\n                    role: \"assistant\",\n                    content: \"\",\n                    function_call: payload.function_call\n                  },\n                  {\n                    role: \"function\",\n                    name: payload.function_call.name,\n                    content: JSON.stringify(result)\n                  }\n                ];\n                return newFunctionCallMessages;\n              }\n            );\n          }\n          if (callbacks.experimental_onToolCall) {\n            const toolCalls = {\n              tools: []\n            };\n            for (const tool of payload.tool_calls) {\n              toolCalls.tools.push({\n                id: tool.id,\n                type: \"function\",\n                func: {\n                  name: tool.function.name,\n                  arguments: JSON.parse(tool.function.arguments)\n                }\n              });\n            }\n            let responseIndex = 0;\n            try {\n              functionResponse = await callbacks.experimental_onToolCall(\n                toolCalls,\n                (result) => {\n                  if (result) {\n                    const { tool_call_id, function_name, tool_call_result } = result;\n                    newFunctionCallMessages = [\n                      ...newFunctionCallMessages,\n                      // Only append the assistant message if it's the first response\n                      ...responseIndex === 0 ? [\n                        {\n                          role: \"assistant\",\n                          content: \"\",\n                          tool_calls: payload.tool_calls.map(\n                            (tc) => ({\n                              id: tc.id,\n                              type: \"function\",\n                              function: {\n                                name: tc.function.name,\n                                // we send the arguments an object to the user, but as the API expects a string, we need to stringify it\n                                arguments: JSON.stringify(\n                                  tc.function.arguments\n                                )\n                              }\n                            })\n                          )\n                        }\n                      ] : [],\n                      // Append the function call result message\n                      {\n                        role: \"tool\",\n                        tool_call_id,\n                        name: function_name,\n                        content: JSON.stringify(tool_call_result)\n                      }\n                    ];\n                    responseIndex++;\n                  }\n                  return newFunctionCallMessages;\n                }\n              );\n            } catch (e) {\n              console.error(\"Error calling experimental_onToolCall:\", e);\n            }\n          }\n          if (!functionResponse) {\n            controller.enqueue(\n              textEncoder.encode(\n                isComplexMode ? formatStreamPart(\n                  payload.function_call ? \"function_call\" : \"tool_calls\",\n                  // parse to prevent double-encoding:\n                  JSON.parse(aggregatedResponse)\n                ) : aggregatedResponse\n              )\n            );\n            return;\n          } else if (typeof functionResponse === \"string\") {\n            controller.enqueue(\n              isComplexMode ? textEncoder.encode(formatStreamPart(\"text\", functionResponse)) : textEncoder.encode(functionResponse)\n            );\n            aggregatedFinalCompletionResponse = functionResponse;\n            return;\n          }\n          const filteredCallbacks = {\n            ...callbacks,\n            onStart: void 0\n          };\n          callbacks.onFinal = void 0;\n          const openAIStream = OpenAIStream(functionResponse, {\n            ...filteredCallbacks,\n            [__internal__OpenAIFnMessagesSymbol]: newFunctionCallMessages\n          });\n          const reader = openAIStream.getReader();\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            controller.enqueue(value);\n          }\n        }\n      } finally {\n        if (callbacks.onFinal && aggregatedFinalCompletionResponse) {\n          await callbacks.onFinal(aggregatedFinalCompletionResponse);\n        }\n      }\n    }\n  });\n}\n\n// streams/replicate-stream.ts\nasync function ReplicateStream(res, cb, options) {\n  var _a;\n  const url = (_a = res.urls) == null ? void 0 : _a.stream;\n  if (!url) {\n    if (res.error)\n      throw new Error(res.error);\n    else\n      throw new Error(\"Missing stream URL in Replicate response\");\n  }\n  const eventStream = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Accept: \"text/event-stream\",\n      ...options == null ? void 0 : options.headers\n    }\n  });\n  return AIStream(eventStream, void 0, cb).pipeThrough(\n    createStreamDataTransformer(cb == null ? void 0 : cb.experimental_streamData)\n  );\n}\n\n// shared/read-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n  const concatenatedChunks = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const chunk of chunks) {\n    concatenatedChunks.set(chunk, offset);\n    offset += chunk.length;\n  }\n  chunks.length = 0;\n  return concatenatedChunks;\n}\nasync function* readDataStream(reader, {\n  isAborted\n} = {}) {\n  const decoder = new TextDecoder();\n  const chunks = [];\n  let totalLength = 0;\n  while (true) {\n    const { value } = await reader.read();\n    if (value) {\n      chunks.push(value);\n      totalLength += value.length;\n      if (value[value.length - 1] !== NEWLINE) {\n        continue;\n      }\n    }\n    if (chunks.length === 0) {\n      break;\n    }\n    const concatenatedChunks = concatChunks(chunks, totalLength);\n    totalLength = 0;\n    const streamParts2 = decoder.decode(concatenatedChunks, { stream: true }).split(\"\\n\").filter((line) => line !== \"\").map(parseStreamPart);\n    for (const streamPart of streamParts2) {\n      yield streamPart;\n    }\n    if (isAborted == null ? void 0 : isAborted()) {\n      reader.cancel();\n      break;\n    }\n  }\n}\n\n// shared/parse-complex-response.ts\nfunction assignAnnotationsToMessage(message, annotations) {\n  if (!message || !annotations || !annotations.length)\n    return message;\n  return { ...message, annotations: [...annotations] };\n}\nasync function parseComplexResponse({\n  reader,\n  abortControllerRef,\n  update,\n  onFinish,\n  generateId = nanoid,\n  getCurrentDate = () => /* @__PURE__ */ new Date()\n}) {\n  const createdAt = getCurrentDate();\n  const prefixMap = {\n    data: []\n  };\n  let message_annotations = void 0;\n  for await (const { type, value } of readDataStream(reader, {\n    isAborted: () => (abortControllerRef == null ? void 0 : abortControllerRef.current) === null\n  })) {\n    if (type === \"text\") {\n      if (prefixMap[\"text\"]) {\n        prefixMap[\"text\"] = {\n          ...prefixMap[\"text\"],\n          content: (prefixMap[\"text\"].content || \"\") + value\n        };\n      } else {\n        prefixMap[\"text\"] = {\n          id: generateId(),\n          role: \"assistant\",\n          content: value,\n          createdAt\n        };\n      }\n    }\n    let functionCallMessage = null;\n    if (type === \"function_call\") {\n      prefixMap[\"function_call\"] = {\n        id: generateId(),\n        role: \"assistant\",\n        content: \"\",\n        function_call: value.function_call,\n        name: value.function_call.name,\n        createdAt\n      };\n      functionCallMessage = prefixMap[\"function_call\"];\n    }\n    let toolCallMessage = null;\n    if (type === \"tool_calls\") {\n      prefixMap[\"tool_calls\"] = {\n        id: generateId(),\n        role: \"assistant\",\n        content: \"\",\n        tool_calls: value.tool_calls,\n        createdAt\n      };\n      toolCallMessage = prefixMap[\"tool_calls\"];\n    }\n    if (type === \"data\") {\n      prefixMap[\"data\"].push(...value);\n    }\n    let responseMessage = prefixMap[\"text\"];\n    if (type === \"message_annotations\") {\n      if (!message_annotations) {\n        message_annotations = [...value];\n      } else {\n        message_annotations.push(...value);\n      }\n      functionCallMessage = assignAnnotationsToMessage(\n        prefixMap[\"function_call\"],\n        message_annotations\n      );\n      toolCallMessage = assignAnnotationsToMessage(\n        prefixMap[\"tool_calls\"],\n        message_annotations\n      );\n      responseMessage = assignAnnotationsToMessage(\n        prefixMap[\"text\"],\n        message_annotations\n      );\n    }\n    if (message_annotations == null ? void 0 : message_annotations.length) {\n      const messagePrefixKeys = [\n        \"text\",\n        \"function_call\",\n        \"tool_calls\"\n      ];\n      messagePrefixKeys.forEach((key) => {\n        if (prefixMap[key]) {\n          prefixMap[key].annotations = [...message_annotations];\n        }\n      });\n    }\n    const merged = [functionCallMessage, toolCallMessage, responseMessage].filter(Boolean).map((message) => ({\n      ...assignAnnotationsToMessage(message, message_annotations)\n    }));\n    update(merged, [...prefixMap[\"data\"]]);\n  }\n  onFinish == null ? void 0 : onFinish(prefixMap);\n  return {\n    messages: [\n      prefixMap.text,\n      prefixMap.function_call,\n      prefixMap.tool_calls\n    ].filter(Boolean),\n    data: prefixMap.data\n  };\n}\n\n// streams/streaming-react-response.ts\nvar experimental_StreamingReactResponse = class {\n  constructor(res, options) {\n    var _a;\n    let resolveFunc = () => {\n    };\n    let next = new Promise((resolve) => {\n      resolveFunc = resolve;\n    });\n    if (options == null ? void 0 : options.data) {\n      const processedStream = res.pipeThrough(\n        options.data.stream\n      );\n      let lastPayload = void 0;\n      parseComplexResponse({\n        reader: processedStream.getReader(),\n        update: (merged, data) => {\n          var _a2, _b, _c;\n          const content2 = (_b = (_a2 = merged[0]) == null ? void 0 : _a2.content) != null ? _b : \"\";\n          const ui = ((_c = options == null ? void 0 : options.ui) == null ? void 0 : _c.call(options, { content: content2, data })) || content2;\n          const payload = { ui, content: content2 };\n          const resolvePrevious = resolveFunc;\n          const nextRow = new Promise((resolve) => {\n            resolveFunc = resolve;\n          });\n          resolvePrevious({\n            next: nextRow,\n            ...payload\n          });\n          lastPayload = payload;\n        },\n        generateId: (_a = options.generateId) != null ? _a : nanoid,\n        onFinish: () => {\n          if (lastPayload !== void 0) {\n            resolveFunc({\n              next: null,\n              ...lastPayload\n            });\n          }\n        }\n      });\n      return next;\n    }\n    let content = \"\";\n    const decode = createChunkDecoder();\n    const reader = res.getReader();\n    async function readChunk() {\n      var _a2;\n      const { done, value } = await reader.read();\n      if (!done) {\n        content += decode(value);\n      }\n      const ui = ((_a2 = options == null ? void 0 : options.ui) == null ? void 0 : _a2.call(options, { content })) || content;\n      const payload = {\n        ui,\n        content\n      };\n      const resolvePrevious = resolveFunc;\n      const nextRow = done ? null : new Promise((resolve) => {\n        resolveFunc = resolve;\n      });\n      resolvePrevious({\n        next: nextRow,\n        ...payload\n      });\n      if (done) {\n        return;\n      }\n      await readChunk();\n    }\n    readChunk();\n    return next;\n  }\n};\n\n// streams/streaming-text-response.ts\nvar StreamingTextResponse = class extends Response {\n  constructor(res, init, data) {\n    let processedStream = res;\n    if (data) {\n      processedStream = res.pipeThrough(data.stream);\n    }\n    super(processedStream, {\n      ...init,\n      status: 200,\n      headers: {\n        \"Content-Type\": \"text/plain; charset=utf-8\",\n        [COMPLEX_HEADER]: data ? \"true\" : \"false\",\n        ...init == null ? void 0 : init.headers\n      }\n    });\n  }\n};\nfunction streamToResponse(res, response, init) {\n  response.writeHead((init == null ? void 0 : init.status) || 200, {\n    \"Content-Type\": \"text/plain; charset=utf-8\",\n    ...init == null ? void 0 : init.headers\n  });\n  const reader = res.getReader();\n  function read() {\n    reader.read().then(({ done, value }) => {\n      if (done) {\n        response.end();\n        return;\n      }\n      response.write(value);\n      read();\n    });\n  }\n  read();\n}\nexport {\n  AIStream,\n  AWSBedrockAnthropicStream,\n  AWSBedrockCohereStream,\n  AWSBedrockLlama2Stream,\n  AWSBedrockStream,\n  AnthropicStream,\n  COMPLEX_HEADER,\n  CohereStream,\n  GoogleGenerativeAIStream,\n  HuggingFaceStream,\n  InkeepStream,\n  LangChainStream,\n  MistralStream,\n  OpenAIStream,\n  ReplicateStream,\n  StreamingTextResponse,\n  createCallbacksTransformer,\n  createChunkDecoder,\n  createEventStreamTransformer,\n  createStreamDataTransformer,\n  experimental_AssistantResponse,\n  experimental_StreamData,\n  experimental_StreamingReactResponse,\n  isStreamStringEqualToType,\n  nanoid,\n  readableFromAsyncIterable,\n  streamToResponse,\n  trimStartOfStreamHelper\n};\n//# sourceMappingURL=index.mjs.map","import OpenAI from \"openai\";\nimport { OpenAIStream, StreamingTextResponse } from \"ai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport const runtime = \"edge\";\n\nexport async function POST(req: Request) {\n  const {\n    messages,\n    model,\n    temperature,\n    max_tokens,\n    top_p,\n    frequency_penalty,\n    presence_penalty,\n  } = await req.json();\n\n  const response = await openai.chat.completions.create({\n    stream: true,\n    model: model,\n    temperature: temperature,\n    max_tokens: max_tokens,\n    top_p: top_p,\n    frequency_penalty: frequency_penalty,\n    presence_penalty: presence_penalty,\n    messages: messages,\n  });\n\n  const stream = OpenAIStream(response);\n  return new StreamingTextResponse(stream);\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/home/pc-1827/Desktop/practice/assignments/blubeeai_assignment/omniplex/src/app/api/chat/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/home/pc-1827/Desktop/practice/assignments/blubeeai_assignment/omniplex/src/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2Fhome%2Fpc-1827%2FDesktop%2Fpractice%2Fassignments%2Fblubeeai_assignment%2Fomniplex%2Fsrc%2Fapp&appPaths=%2Fapi%2Fchat%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/chat/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","_platformHeaders","kind","registry_fetch","registry_FormData","registry_File","registry_ReadableStream","registry_getMultipartRequestOptions","getDefaultAgent","fileFromPath","isFsReadStream","_AbstractPage_client","_AbstractChatCompletionRunner_instances","_AbstractChatCompletionRunner_connectedPromise","_AbstractChatCompletionRunner_resolveConnectedPromise","_AbstractChatCompletionRunner_rejectConnectedPromise","_AbstractChatCompletionRunner_endPromise","_AbstractChatCompletionRunner_resolveEndPromise","_AbstractChatCompletionRunner_rejectEndPromise","_AbstractChatCompletionRunner_listeners","_AbstractChatCompletionRunner_ended","_AbstractChatCompletionRunner_errored","_AbstractChatCompletionRunner_aborted","_AbstractChatCompletionRunner_catchingPromiseCreated","_AbstractChatCompletionRunner_getFinalContent","_AbstractChatCompletionRunner_getFinalMessage","_AbstractChatCompletionRunner_getFinalFunctionCall","_AbstractChatCompletionRunner_getFinalFunctionCallResult","_AbstractChatCompletionRunner_calculateTotalUsage","_AbstractChatCompletionRunner_handleError","_AbstractChatCompletionRunner_validateParams","_AbstractChatCompletionRunner_stringifyFunctionCallResult","_ChatCompletionStream_instances","_ChatCompletionStream_currentChatCompletionSnapshot","_ChatCompletionStream_beginRequest","_ChatCompletionStream_addChunk","_ChatCompletionStream_endRequest","_ChatCompletionStream_accumulateChatCompletion","_AbstractAssistantStreamRunner_connectedPromise","_AbstractAssistantStreamRunner_resolveConnectedPromise","_AbstractAssistantStreamRunner_rejectConnectedPromise","_AbstractAssistantStreamRunner_endPromise","_AbstractAssistantStreamRunner_resolveEndPromise","_AbstractAssistantStreamRunner_rejectEndPromise","_AbstractAssistantStreamRunner_listeners","_AbstractAssistantStreamRunner_ended","_AbstractAssistantStreamRunner_errored","_AbstractAssistantStreamRunner_aborted","_AbstractAssistantStreamRunner_catchingPromiseCreated","_AbstractAssistantStreamRunner_handleError","_AssistantStream_instances","_AssistantStream_events","_AssistantStream_runStepSnapshots","_AssistantStream_messageSnapshots","_AssistantStream_messageSnapshot","_AssistantStream_finalRun","_AssistantStream_currentContentIndex","_AssistantStream_currentContent","_AssistantStream_currentToolCallIndex","_AssistantStream_currentToolCall","_AssistantStream_currentEvent","_AssistantStream_currentRunSnapshot","_AssistantStream_currentRunStepSnapshot","_AssistantStream_addEvent","_AssistantStream_endRequest","_AssistantStream_handleMessage","_AssistantStream_handleRunStep","_AssistantStream_handleEvent","_AssistantStream_accumulateRunStep","_AssistantStream_accumulateMessage","_AssistantStream_accumulateContent","_AssistantStream_handleRun","_a","VERSION","auto","MultipartBody","constructor","body","Symbol","toStringTag","setShims","shims","options","fetch","Request","Response","Headers","FormData","Blob","File","ReadableStream","getMultipartRequestOptions","getRuntime","manuallyImported","_fetch","_Request","_Response","_Headers","recommendation","error","message","form","opts","undefined","error_OpenAIError","Error","APIError","status","headers","makeMessage","code","param","type","msg","JSON","stringify","generate","errorResponse","APIConnectionError","cause","castToError","BadRequestError","AuthenticationError","PermissionDeniedError","NotFoundError","ConflictError","UnprocessableEntityError","RateLimitError","InternalServerError","APIUserAbortError","APIConnectionTimeoutError","arguments","Stream","iterator","controller","fromSSEResponse","response","consumed","decoder","SSEDecoder","iterMessages","abort","lineDecoder","LineDecoder","chunk","readableStreamAsyncIterable","line","decode","sse","flush","done","data","startsWith","event","parse","e","console","raw","name","fromReadableStream","readableStream","iterLines","asyncIterator","tee","left","right","teeIterator","next","queue","length","result","push","shift","toReadableStream","iter","self","encoder","TextEncoder","start","pull","ctrl","value","close","bytes","encode","enqueue","err","cancel","return","chunks","endsWith","substring","join","fieldname","_","partition","str","delimiter","index","indexOf","buffer","trailingCR","text","decodeText","slice","trailingNewline","NEWLINE_CHARS","has","lines","split","NEWLINE_REGEXP","pop","Buffer","toString","Uint8Array","from","TextDecoder","ArrayBuffer","textDecoder","stream","reader","getReader","read","releaseLock","cancelPromise","Set","isResponseLike","url","blob","isFileLike","lastModified","isBlobLike","size","arrayBuffer","isUploadable","toFile","URL","pathname","bits","getBytes","getName","getStringFromMaybeBuffer","filename","path","parts","isView","isAsyncIterableIterator","propsForError","props","Object","getOwnPropertyNames","map","p","x","uploads_Buffer","String","isMultipartBody","multipartFormRequestOptions","createForm","Promise","all","entries","key","addFormValue","hasUploadableValue","Array","isArray","some","k","append","file","entry","prop","__classPrivateFieldSet","receiver","state","f","call","set","__classPrivateFieldGet","get","defaultParseResponse","debug","__streamClass","__binaryResponse","contentType","includes","json","APIPromise","responsePromise","parseResponse","resolve","_thenUnwrap","transform","asResponse","then","withResponse","parsedPromise","onfulfilled","onrejected","catch","finally","onfinally","APIClient","baseURL","maxRetries","timeout","httpAgent","overridenFetch","validatePositiveInteger","authHeaders","defaultHeaders","Accept","getUserAgent","getPlatformHeaders","validateHeaders","customHeaders","defaultIdempotencyKey","uuid4","methodRequest","post","patch","put","delete","method","request","getAPIList","Page","requestAPIList","calculateContentLength","core_Buffer","byteLength","encoded","buildRequest","query","contentLength","buildURL","minAgentTimeout","idempotencyHeader","idempotencyKey","reqHeaders","buildHeaders","req","agent","signal","applyHeadersMut","prepareOptions","prepareRequest","parseHeaders","fromEntries","header","makeStatusError","remainingRetries","makeRequest","optionsInput","retriesRemaining","aborted","AbortController","fetchWithTimeout","retryRequest","responseHeaders","createResponseHeaders","ok","shouldRetry","retryMessage","errText","errJSON","safeJSON","errMessage","PagePromise","isAbsoluteURL","defaultQuery","isEmptyObj","search","stringifyQuery","filter","encodeURIComponent","init","ms","addEventListener","setTimeout","getRequestClient","clearTimeout","shouldRetryHeader","timeoutMillis","retryAfterMillisHeader","timeoutMs","parseFloat","Number","isNaN","retryAfterHeader","timeoutSeconds","Date","now","calculateDefaultRetryTimeoutMillis","sleep","sleepSeconds","min","initialRetryDelay","Math","pow","random","AbstractPage","client","hasNextPage","items","getPaginatedItems","nextPageInfo","getNextPage","nextInfo","nextOptions","params","searchParams","iterPages","page","WeakMap","item","Proxy","target","toLowerCase","requestOptionsKeys","isRequestOptions","obj","keys","every","hasOwn","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","process","platform","startsWithSchemeRegexp","test","n","isInteger","readEnv","env","trim","_k","prototype","hasOwnProperty","targetHeaders","newHeaders","lowerKey","val","action","args","log","replace","r","v","c","isRunningInBrowser","window","document","navigator","isObj","object","nextPageParams","CursorPage","info","id","after","APIResource","_client","Completions","create","completions_Completions","Chat","completions","Embeddings","Files","retrieve","fileId","list","FileObjectsPage","del","content","retrieveContent","waitForProcessing","pollInterval","maxWait","TERMINAL_STATES","Images","createVariation","edit","Speech","Transcriptions","Translations","Audio","transcriptions","translations","speech","Moderations","Models","model","ModelsPage","Jobs","fineTuningJobId","FineTuningJobsPage","listEvents","FineTuningJobEventsPage","FineTuning","jobs","files_Files","assistantId","AssistantFilesPage","Assistants","files","update","AssistantsPage","isRunnableFunctionWithParse","fn","isAssistantMessage","role","isFunctionMessage","isToolMessage","AbstractChatCompletionRunner_classPrivateFieldSet","AbstractChatCompletionRunner_classPrivateFieldGet","AbstractChatCompletionRunner","add","_chatCompletions","messages","_emit","openAIError","reject","_run","executor","_emitFinal","_addChatCompletion","chatCompletion","choices","_addMessage","emit","function_call","tool_calls","tool_call","function","_connected","ended","errored","on","listener","listeners","off","findIndex","l","splice","once","emitted","finalChatCompletion","completion","finalContent","finalMessage","finalFunctionCall","finalFunctionCallResult","totalUsage","allChatCompletions","forEach","usage","_createChatCompletion","_runChatCompletion","_runFunctions","restParams","singleFunctionToCall","maxChatCompletions","functionsByName","functions","parameters","description","i","parsed","rawContent","_runTools","tool_choice","tools","t","tool_call_id","WeakSet","at","y","total","completion_tokens","prompt_tokens","total_tokens","ChatCompletionRunner","runFunctions","runner","runTools","ChatCompletionStream_classPrivateFieldGet","ChatCompletionStream_classPrivateFieldSet","ChatCompletionStream","currentChatCompletionSnapshot","_fromReadableStream","createChatCompletion","chatId","delta","snapshot","finalizeChatCompletion","created","system_fingerprint","rest","finish_reason","logprobs","choiceRest","messageRest","toolRest","fnRest","_b","_c","other","assign","choice","pushQueue","readQueue","bind","ChatCompletionStreamingRunner","chat_completions_Completions","chat","chat_Chat","AbstractAssistantStreamRunner_classPrivateFieldSet","AbstractAssistantStreamRunner_classPrivateFieldGet","AbstractAssistantStreamRunner","_addRun","run","_threadAssistantStream","thread","_createThreadAssistantStream","_runAssistantStream","threadId","runs","_createAssistantStream","_runToolAssistantStream","runId","_createToolAssistantStream","runResult","createAndRun","submitToolOutputs","AssistantStream_classPrivateFieldGet","AssistantStream_classPrivateFieldSet","AssistantStream","createToolAssistantStream","createThreadAssistantStream","createAssistantStream","currentEvent","currentRun","currentMessageSnapshot","currentRunStepSnapshot","finalRunSteps","values","finalMessages","finalRun","accumulateDelta","acc","deltaValue","accValue","accumulatedMessage","newContent","snapshotContent","textDelta","image_file","currentContent","accumulatedRunStep","step_details","toolCall","details","accumulated","contentElement","messages_files_Files","messageId","MessageFilesPage","Messages","MessagesPage","Steps","stepId","RunStepsPage","Runs","steps","RunsPage","createAndStream","beta","threads","submitToolOutputsStream","Threads","createAndRunStream","Beta","assistants","OpenAI","apiKey","organization","dangerouslyAllowBrowser","embeddings","images","audio","moderations","models","fineTuning","_options","Authorization","OpenAIError","openai_OpenAIError","openai_APIError","openai_APIConnectionError","openai_APIConnectionTimeoutError","openai_APIUserAbortError","openai_NotFoundError","openai_ConflictError","openai_RateLimitError","openai_BadRequestError","openai_AuthenticationError","openai_InternalServerError","openai_PermissionDeniedError","openai_UnprocessableEntityError","error_namespaceObject","openai","BOM","textStreamPart","functionCallStreamPart","dataStreamPart","errorStreamPart","assistantMessageStreamPart","assistantControlDataStreamPart","dataMessageStreamPart","toolCallStreamPart","tc","messageAnnotationsStreamPart","streamParts","streamPartsByCode","validCodes","part","parseStreamPart","firstSeparatorIndex","prefix","jsonValue","formatStreamPart","streamPart","find","createCallbacksTransformer","cb","textEncoder","aggregatedResponse","callbacks","TransformStream","onStart","onToken","onText","onCompletion","onFinal","customAlphabet","alphabet","defaultSize","streamable5","extract","chunkToText","getDate","_d","_e","_f","_g","functionCall","toolCalls","finishReason","isFunctionStreamingIn","isStreamStart","trimStartOfStream","trimStart","_h","_i","_j","_l","_m","_n","_o","_p","_q","_r","isChatCompletionChunk","isText","cleanupArguments","isCompletion","argumentChunk","escapedPartialJson","__internal__OpenAIFnMessagesSymbol","StreamingTextResponse","res","processedStream","pipeThrough","OPENAI_API_KEY","runtime","POST","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","OpenAIStream","it","readableFromAsyncIterable","iterable","reason","experimental_onFunctionCall","experimental_onToolCall","AIStream","customParser","errorText","responseBodyStream","createEventStreamTransformer","eventSourceParser","createParser","onParse","isFirstChunk","startingPosition","startingFieldLength","eventId","eventName","reset","feed","charCode","charCodeAt","position","discardTrailingNewline","character","lineLength","fieldLength","parseEventStreamLine","lineBuffer","noValue","field","step","valueLength","concat","retry","parseInt","terminate","parsedMessage","parseOpenAIStream","createStreamDataTransformer","experimental_streamData","functionCallTransformer","createFunctionCallTransformer","aggregatedFinalCompletionResponse","functionCallMessages","isComplexMode","createChunkDecoder","complex","functionResponse","payload","newFunctionCallMessages","warn","argumentsPayload","tool","func","responseIndex","function_name","tool_call_result","filteredCallbacks","openAIStream","routeModule","module_compiled","AppRouteRouteModule","definition","route_kind","APP_ROUTE","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fchat_2Froute_ts_page_2Fapi_2Fchat_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcGMtMTgyNyUyRkRlc2t0b3AlMkZwcmFjdGljZSUyRmFzc2lnbm1lbnRzJTJGYmx1YmVlYWlfYXNzaWdubWVudCUyRm9tbmlwbGV4JTJGc3JjJTJGYXBwJmFwcFBhdGhzPSUyRmFwaSUyRmNoYXQlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_standalone_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}